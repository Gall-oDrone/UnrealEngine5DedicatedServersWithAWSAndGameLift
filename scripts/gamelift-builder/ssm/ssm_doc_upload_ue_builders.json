{
    "schemaVersion": "2.2",
    "description": "Upload Unreal Engine builder to S3 bucket (single builder per execution)",
    "parameters": {
        "bucketName": {
            "type": "String",
            "description": "S3 bucket name for storing UE builders"
        },
        "s3Keys": {
            "type": "String",
            "description": "S3 object key/path for the builder"
        },
        "builderNames": {
            "type": "String",
            "description": "Builder name"
        },
        "localPaths": {
            "type": "String",
            "description": "Local path to builder directory"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "uploadUEBuilders",
            "inputs": {
                "timeoutSeconds": "3600",
                "runCommand": [
                    "# Unreal Engine Builder Upload Script",
                    "",
                    "# Get parameters from SSM",
                    "$BucketName = '{{ bucketName }}'",
                    "$S3Keys = '{{ s3Keys }}'",
                    "$BuilderNames = '{{ builderNames }}'",
                    "$LocalPaths = '{{ localPaths }}'",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\\\ue-builder-upload-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Parse parameters (single builder per execution)",
                    "$S3Key = $S3Keys.Trim()",
                    "$BuilderName = $BuilderNames.Trim()",
                    "$LocalPath = $LocalPaths.Trim()",
                    "",
                    "# Log session information",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Unreal Engine Builder Upload Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Bucket Name: $BucketName\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "Write-Log \"S3 Key: $S3Key\" \"INFO\"",
                    "Write-Log \"Builder Name: $BuilderName\" \"INFO\"",
                    "Write-Log \"Local Path: $LocalPath\" \"INFO\"",
                    "",
                    "# Test AWS CLI availability",
                    "Write-Log \"Testing AWS CLI...\" \"INFO\"",
                    "try {",
                    "    $awsVersion = & \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\" --version 2>&1",
                    "    Write-Log \"AWS CLI available: $awsVersion\" \"SUCCESS\"",
                    "} catch {",
                    "    Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = & \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\" sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid: $callerIdentity\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Test S3 bucket access",
                    "Write-Log \"Testing S3 bucket access...\" \"INFO\"",
                    "try {",
                    "    $bucketTest = & \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\" s3api head-bucket --bucket $BucketName --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"S3 bucket accessible: $BucketName\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"S3 bucket not accessible: $bucketTest\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to access S3 bucket: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Initialize counters",
                    "$SuccessCount = 0",
                    "$FailureCount = 0",
                    "$TotalSizeBytes = 0",
                    "",
                    "# Upload the builder",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"Processing builder: $BuilderName\" \"INFO\"",
                    "Write-Log \"----------------------------------------\" \"INFO\"",
                    "    ",
                    "# Validate local path",
                    "if ([string]::IsNullOrEmpty($LocalPath)) {",
                    "    Write-Log \"❌ No local path provided for builder: $BuilderName\" \"ERROR\"",
                    "    $FailureCount++",
                    "    exit 1",
                    "}",
                    "",
                    "if (!(Test-Path $LocalPath)) {",
                    "    Write-Log \"❌ Local path does not exist: $LocalPath\" \"ERROR\"",
                    "    $FailureCount++",
                    "    exit 1",
                    "}",
                    "",
                    "if (!(Test-Path $LocalPath -PathType Container)) {",
                    "    Write-Log \"❌ Local path is not a directory: $LocalPath\" \"ERROR\"",
                    "    $FailureCount++",
                    "    exit 1",
                    "}",
                    "    ",
                    "Write-Log \"Uploading builder: $BuilderName\" \"INFO\"",
                    "Write-Log \"  Local Path: $LocalPath\" \"INFO\"",
                    "Write-Log \"  S3 Key: $S3Key\" \"INFO\"",
                    "",
                    "# Calculate directory size",
                    "try {",
                    "    $DirSize = (Get-ChildItem -Path $LocalPath -Recurse -File | Measure-Object -Property Length -Sum).Sum",
                    "    $DirSizeMB = [math]::Round($DirSize / 1MB, 2)",
                    "    $DirSizeGB = [math]::Round($DirSize / 1GB, 2)",
                    "    ",
                    "    if ($DirSizeGB -gt 1) {",
                    "        Write-Log \"  Directory Size: $DirSizeGB GB\" \"INFO\"",
                    "    } else {",
                    "        Write-Log \"  Directory Size: $DirSizeMB MB\" \"INFO\"",
                    "    }",
                    "    ",
                    "    $TotalSizeBytes += $DirSize",
                    "} catch {",
                    "    Write-Log \"  Warning: Could not calculate directory size: $_\" \"WARN\"",
                    "}",
                    "",
                    "# Upload using AWS CLI S3 sync",
                    "$awsExe = \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\"",
                    "$s3Destination = \"s3://$BucketName/$S3Key\"",
                    "",
                    "# Remove trailing slash from S3 key if present",
                    "if ($S3Key.EndsWith('/')) {",
                    "    $S3Key = $S3Key.TrimEnd('/')",
                    "    $s3Destination = \"s3://$BucketName/$S3Key\"",
                    "}",
                    "",
                    "Write-Log \"Executing AWS S3 sync from $LocalPath to $s3Destination\" \"INFO\"",
                    "Write-Log \"Command: aws s3 sync (source) (destination) --region $Region --delete\" \"INFO\"",
                    "",
                    "try {",
                    "    $startTime = Get-Date",
                    "    $result = & $awsExe s3 sync \"$LocalPath\" \"$s3Destination\" --region $Region --delete 2>&1",
                    "    $exitCode = $LASTEXITCODE",
                    "    $endTime = Get-Date",
                    "    $duration = $endTime - $startTime",
                    "    ",
                    "    Write-Log \"AWS CLI exit code: $exitCode\" \"INFO\"",
                    "    Write-Log \"Upload duration: $($duration.TotalMinutes.ToString('F2')) minutes\" \"INFO\"",
                    "    ",
                    "    if ($exitCode -eq 0) {",
                    "        Write-Log \"✅ Upload completed successfully!\" \"SUCCESS\"",
                    "        Write-Log \"  Builder: $BuilderName\" \"SUCCESS\"",
                    "        Write-Log \"  S3 Destination: $s3Destination\" \"SUCCESS\"",
                    "        Write-Log \"  Duration: $($duration.TotalMinutes.ToString('F2')) minutes\" \"SUCCESS\"",
                    "        ",
                    "        $SuccessCount++",
                    "        ",
                    "        # Log any sync output",
                    "        if ($result) {",
                    "            Write-Log \"  Sync details: $result\" \"INFO\"",
                    "        }",
                    "    } else {",
                    "        Write-Log \"❌ Upload failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $exitCode\" \"ERROR\"",
                    "        Write-Log \"  Output: $result\" \"ERROR\"",
                    "        ",
                    "        $FailureCount++",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Upload error: $_\" \"ERROR\"",
                    "    $FailureCount++",
                    "}",
                    "",
                    "# Generate summary",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Upload Summary\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Builder: $BuilderName\" \"INFO\"",
                    "Write-Log \"Successful uploads: $SuccessCount\" \"SUCCESS\"",
                    "Write-Log \"Failed uploads: $FailureCount\" $(if ($FailureCount -gt 0) { \"ERROR\" } else { \"INFO\" })",
                    "",
                    "if ($TotalSizeBytes -gt 0) {",
                    "    $TotalSizeMB = [math]::Round($TotalSizeBytes / 1MB, 2)",
                    "    $TotalSizeGB = [math]::Round($TotalSizeBytes / 1GB, 2)",
                    "    if ($TotalSizeGB -gt 1) {",
                    "        Write-Log \"Total data uploaded: $TotalSizeGB GB\" \"INFO\"",
                    "    } else {",
                    "        Write-Log \"Total data uploaded: $TotalSizeMB MB\" \"INFO\"",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"Bucket: s3://$BucketName\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "if ($FailureCount -eq 0) {",
                    "    Write-Log \"All uploads completed successfully!\" \"SUCCESS\"",
                    "    exit 0",
                    "} else {",
                    "    Write-Log \"Some uploads failed\" \"ERROR\"",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}