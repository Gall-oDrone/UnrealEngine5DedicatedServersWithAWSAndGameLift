{
    "schemaVersion": "2.2",
    "description": "Clone, update, or pull a single Git repository on Windows EC2 instances",
    "parameters": {
        "repoUrl": {
            "type": "String",
            "description": "Repository URL to process",
            "default": ""
        },
        "repoName": {
            "type": "String",
            "description": "Repository name (for logging)",
            "default": "Repository"
        },
        "repoBranch": {
            "type": "String",
            "description": "Branch to checkout",
            "default": "main"
        },
        "repoDestination": {
            "type": "String",
            "description": "Destination path for repository",
            "default": "C:\\Repos"
        },
        "operation": {
            "type": "String",
            "description": "Operation to perform: clone, update, or pull",
            "default": "clone",
            "allowedValues": [
                "clone",
                "update",
                "pull"
            ]
        },
        "gitInstallerUrl": {
            "type": "String",
            "description": "URL to download Git installer if not installed",
            "default": "https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "repositoryOperations",
            "inputs": {
                "timeoutSeconds": "3600",
                "runCommand": [
                    "# Repository Operations Script for Windows",
                    "# Handles clone, update, and pull operations for a single Git repository",
                    "",
                    "# DEBUG: Script started",
                    "Write-Host \"=== SSM DOCUMENT EXECUTION STARTED ===\"",
                    "Write-Host \"Timestamp: $(Get-Date)\"",
                    "Write-Host \"PowerShell Version: $($PSVersionTable.PSVersion)\"",
                    "Write-Host \"Current User: $env:USERNAME\"",
                    "Write-Host \"Computer Name: $env:COMPUTERNAME\"",
                    "Write-Host \"Working Directory: $(Get-Location)\"",
                    "",
                    "# Get parameters from SSM",
                    "$RepoUrl = '{{ repoUrl }}'",
                    "$RepoName = '{{ repoName }}'",
                    "$RepoBranch = '{{ repoBranch }}'",
                    "$RepoDestination = '{{ repoDestination }}'",
                    "$Operation = '{{ operation }}'",
                    "$GitInstallerUrl = '{{ gitInstallerUrl }}'",
                    "",
                    "# Set up logging - CRITICAL: Do this first!",
                    "try {",
                    "    $LogDir = \"C:\\logs\"",
                    "    Write-Host \"Creating log directory: $LogDir\"",
                    "    if (!(Test-Path $LogDir)) {",
                    "        New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "        Write-Host \"Created log directory: $LogDir\"",
                    "    } else {",
                    "        Write-Host \"Log directory already exists: $LogDir\"",
                    "    }",
                    "    ",
                    "    $LogFile = \"$LogDir\\repo-operations-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "    Write-Host \"Log file will be: $LogFile\"",
                    "    ",
                    "    # Create the log file immediately",
                    "    \"Repository Operations Log - $(Get-Date)\" | Out-File -FilePath $LogFile -Encoding UTF8",
                    "    Write-Host \"Created log file: $LogFile\"",
                    "} catch {",
                    "    Write-Host \"ERROR: Failed to set up logging: $_\"",
                    "    $LogFile = \"C:\\temp\\repo-operations-fallback.log\"",
                    "    \"Fallback log - $(Get-Date)\" | Out-File -FilePath $LogFile -Encoding UTF8 -Force",
                    "}",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    try {",
                    "        $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "        $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "        Write-Host $LogEntry",
                    "        Add-Content -Path $LogFile -Value $LogEntry -Encoding UTF8",
                    "    } catch {",
                    "        Write-Host \"ERROR: Failed to write to log: $_\"",
                    "        Write-Host \"Message: $Message\"",
                    "    }",
                    "}",
                    "",
                    "# Log session information",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Repository Operations Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Operation: $Operation\" \"INFO\"",
                    "Write-Log \"Repository: $RepoName\" \"INFO\"",
                    "Write-Log \"URL: $RepoUrl\" \"INFO\"",
                    "Write-Log \"Branch: $RepoBranch\" \"INFO\"",
                    "Write-Log \"Destination: $RepoDestination\" \"INFO\"",
                    "Write-Log \"Log File: $LogFile\" \"INFO\"",
                    "",
                    "# Debug: Show current environment",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"Current Environment Debug Info:\" \"INFO\"",
                    "Write-Log \"Current PATH: $env:PATH\" \"INFO\"",
                    "Write-Log \"Current USER: $env:USERNAME\" \"INFO\"",
                    "Write-Log \"Current COMPUTER: $env:COMPUTERNAME\" \"INFO\"",
                    "Write-Log \"PowerShell Version: $($PSVersionTable.PSVersion)\" \"INFO\"",
                    "Write-Log \"Working Directory: $(Get-Location)\" \"INFO\"",
                    "",
                    "# Function to refresh environment variables from registry",
                    "function Refresh-EnvironmentVariables {",
                    "    Write-Log \"Refreshing environment variables from registry...\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        # Get system PATH from registry",
                    "        $systemPath = [System.Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\")",
                    "        $userPath = [System.Environment]::GetEnvironmentVariable(\"PATH\", \"User\")",
                    "        ",
                    "        # Combine and set current session PATH",
                    "        $env:PATH = \"$systemPath;$userPath\"",
                    "        ",
                    "        Write-Log \"Refreshed PATH from registry\" \"INFO\"",
                    "        Write-Log \"System PATH: $systemPath\" \"INFO\"",
                    "        Write-Log \"User PATH: $userPath\" \"INFO\"",
                    "        ",
                    "        # Also refresh other common environment variables",
                    "        $env:ProgramFiles = [System.Environment]::GetEnvironmentVariable(\"ProgramFiles\", \"Machine\")",
                    "        $env:ProgramFilesx86 = [System.Environment]::GetEnvironmentVariable(\"ProgramFiles(x86)\", \"Machine\")",
                    "        ",
                    "        return $true",
                    "    }",
                    "    catch {",
                    "        Write-Log \"Failed to refresh environment variables: $_\" \"WARNING\"",
                    "        return $false",
                    "    }",
                    "}",
                    "",
                    "# Function to test if Git is installed and set up environment",
                    "function Test-GitInstalled {",
                    "    try {",
                    "        $gitCmd = Get-Command git -ErrorAction Stop",
                    "        $gitVersion = & git --version 2>&1",
                    "        if ($gitVersion -match 'git version') {",
                    "            Write-Log \"✅ Git is installed: $gitVersion\" \"SUCCESS\"",
                    "            return $true",
                    "        }",
                    "    }",
                    "    catch {",
                    "        Write-Log \"Git command not found in PATH\" \"WARNING\"",
                    "    }",
                    "    ",
                    "    # Check common installation paths and set up environment",
                    "    $gitPaths = @(",
                    "        \"C:\\Program Files\\Git\\bin\\git.exe\",",
                    "        \"C:\\Program Files (x86)\\Git\\bin\\git.exe\",",
                    "        \"C:\\Git\\bin\\git.exe\"",
                    "    )",
                    "    ",
                    "    foreach ($path in $gitPaths) {",
                    "        if (Test-Path $path) {",
                    "            Write-Log \"Found Git at: $path\" \"INFO\"",
                    "            ",
                    "            # Set up Git environment variables",
                    "            $gitBinPath = Split-Path $path -Parent",
                    "            $gitCmdPath = Split-Path $gitBinPath -Parent",
                    "            ",
                    "            # Add Git to PATH for this session",
                    "            $env:PATH = \"$gitBinPath;$env:PATH\"",
                    "            ",
                    "            # Set Git-specific environment variables",
                    "            $env:GIT_EXEC_PATH = \"$gitBinPath\"",
                    "            $env:GIT_INSTALL_ROOT = \"$gitCmdPath\"",
                    "            ",
                    "            # Also add Git's cmd directory to PATH",
                    "            $gitCmdDir = Join-Path $gitCmdPath \"cmd\"",
                    "            if (Test-Path $gitCmdDir) {",
                    "                $env:PATH = \"$gitCmdDir;$env:PATH\"",
                    "                Write-Log \"Added Git cmd directory to PATH: $gitCmdDir\" \"INFO\"",
                    "            }",
                    "            ",
                    "            Write-Log \"Updated PATH: $env:PATH\" \"INFO\"",
                    "            ",
                    "            # Test Git after setting up environment",
                    "            $gitVersion = & \"$path\" --version 2>&1",
                    "            if ($LASTEXITCODE -eq 0) {",
                    "                Write-Log \"✅ Git is installed and working: $gitVersion\" \"SUCCESS\"",
                    "                return $true",
                    "            } else {",
                    "                Write-Log \"Git found but not working properly\" \"WARNING\"",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    Write-Log \"❌ Git is not installed or not accessible\" \"ERROR\"",
                    "    return $false",
                    "}",
                    "",
                    "# Function to validate repository parameters",
                    "function Test-RepositoryParameters {",
                    "    if ([string]::IsNullOrWhiteSpace($RepoUrl)) {",
                    "        Write-Log \"❌ No repository URL provided\" \"ERROR\"",
                    "        return $false",
                    "    }",
                    "    ",
                    "    if ([string]::IsNullOrWhiteSpace($RepoName)) {",
                    "        Write-Log \"Using default repository name: Repository\" \"WARNING\"",
                    "        $RepoName = \"Repository\"",
                    "    }",
                    "    ",
                    "    if ([string]::IsNullOrWhiteSpace($RepoBranch)) {",
                    "        Write-Log \"Using default branch: main\" \"WARNING\"",
                    "        $RepoBranch = \"main\"",
                    "    }",
                    "    ",
                    "    if ([string]::IsNullOrWhiteSpace($RepoDestination)) {",
                    "        Write-Log \"Using default destination: C:\\Repos\" \"WARNING\"",
                    "        $RepoDestination = \"C:\\Repos\"",
                    "    }",
                    "    ",
                    "    return $true",
                    "}",
                    "",
                    "# Function to clone repository",
                    "function Invoke-CloneRepository {",
                    "    param(",
                    "        [string]$Url,",
                    "        [string]$Name,",
                    "        [string]$Branch,",
                    "        [string]$Destination",
                    "    )",
                    "    ",
                    "    Write-Log \"Starting clone operation for: $Name\" \"INFO\"",
                    "    Write-Log \"  URL: $Url\" \"INFO\"",
                    "    Write-Log \"  Branch: $Branch\" \"INFO\"",
                    "    Write-Log \"  Destination: $Destination\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        # Create parent directory if it doesn't exist",
                    "        $ParentDir = Split-Path $Destination -Parent",
                    "        if (!(Test-Path $ParentDir)) {",
                    "            New-Item -ItemType Directory -Path $ParentDir -Force | Out-Null",
                    "            Write-Log \"Created directory: $ParentDir\" \"INFO\"",
                    "        }",
                    "        ",
                    "        # Check if repository already exists",
                    "        if (Test-Path \"$Destination\\.git\") {",
                    "            Write-Log \"⚠️ Repository already exists at: $Destination\" \"WARNING\"",
                    "            return 'skipped'",
                    "        }",
                    "        ",
                    "        # Clone the repository",
                    "        Write-Log \"Executing: git clone --branch $Branch $Url $Destination\" \"INFO\"",
                    "        $cloneOutput = & git clone --branch $Branch --progress $Url $Destination 2>&1",
                    "        ",
                    "        if ($LASTEXITCODE -eq 0) {",
                    "            Write-Log \"✅ Successfully cloned: $Name\" \"SUCCESS\"",
                    "            ",
                    "            # Get repository info",
                    "            Push-Location $Destination",
                    "            $commitHash = & git rev-parse HEAD",
                    "            $commitDate = & git log -1 --format=%ai",
                    "            Pop-Location",
                    "            ",
                    "            Write-Log \"  Latest commit: $commitHash\" \"INFO\"",
                    "            Write-Log \"  Commit date: $commitDate\" \"INFO\"",
                    "            ",
                    "            return 'success'",
                    "        } else {",
                    "            Write-Log \"❌ Failed to clone: $Name\" \"ERROR\"",
                    "            Write-Log \"Git output: $cloneOutput\" \"ERROR\"",
                    "            return 'failed'",
                    "        }",
                    "    }",
                    "    catch {",
                    "        Write-Log \"❌ Exception while cloning $Name : $_\" \"ERROR\"",
                    "        return 'failed'",
                    "    }",
                    "}",
                    "",
                    "# Function to update repository",
                    "function Invoke-UpdateRepository {",
                    "    param(",
                    "        [string]$Url,",
                    "        [string]$Name,",
                    "        [string]$Branch,",
                    "        [string]$Destination",
                    "    )",
                    "    ",
                    "    Write-Log \"Starting update operation for: $Name\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        if (!(Test-Path \"$Destination\\.git\")) {",
                    "            Write-Log \"Repository not found. Attempting to clone instead.\" \"INFO\"",
                    "            return Invoke-CloneRepository -Url $Url -Name $Name -Branch $Branch -Destination $Destination",
                    "        }",
                    "        ",
                    "        Push-Location $Destination",
                    "        ",
                    "        # Store current branch",
                    "        $currentBranch = & git rev-parse --abbrev-ref HEAD",
                    "        Write-Log \"Current branch: $currentBranch\" \"INFO\"",
                    "        ",
                    "        # Fetch latest changes",
                    "        Write-Log \"Fetching latest changes...\" \"INFO\"",
                    "        $fetchOutput = & git fetch origin 2>&1",
                    "        ",
                    "        if ($LASTEXITCODE -ne 0) {",
                    "            Write-Log \"Failed to fetch: $fetchOutput\" \"ERROR\"",
                    "            Pop-Location",
                    "            return 'failed'",
                    "        }",
                    "        ",
                    "        # Check if target branch exists",
                    "        $remoteBranches = & git branch -r",
                    "        if ($remoteBranches -match \"origin/$Branch\") {",
                    "            # Checkout and pull target branch",
                    "            Write-Log \"Checking out branch: $Branch\" \"INFO\"",
                    "            & git checkout $Branch 2>&1",
                    "            ",
                    "            Write-Log \"Pulling latest changes from origin/$Branch\" \"INFO\"",
                    "            $pullOutput = & git pull origin $Branch 2>&1",
                    "            ",
                    "            if ($LASTEXITCODE -eq 0) {",
                    "                Write-Log \"✅ Successfully updated: $Name\" \"SUCCESS\"",
                    "                ",
                    "                # Get updated repository info",
                    "                $commitHash = & git rev-parse HEAD",
                    "                $commitDate = & git log -1 --format=%ai",
                    "                Write-Log \"  Latest commit: $commitHash\" \"INFO\"",
                    "                Write-Log \"  Commit date: $commitDate\" \"INFO\"",
                    "                ",
                    "                Pop-Location",
                    "                return 'success'",
                    "            } else {",
                    "                Write-Log \"❌ Failed to pull changes: $pullOutput\" \"ERROR\"",
                    "                Pop-Location",
                    "                return 'failed'",
                    "            }",
                    "        } else {",
                    "            Write-Log \"⚠️ Branch '$Branch' not found in remote\" \"WARNING\"",
                    "            Pop-Location",
                    "            return 'failed'",
                    "        }",
                    "    }",
                    "    catch {",
                    "        Write-Log \"❌ Exception while updating $Name : $_\" \"ERROR\"",
                    "        Pop-Location -ErrorAction SilentlyContinue",
                    "        return 'failed'",
                    "    }",
                    "}",
                    "",
                    "# Function to pull repository",
                    "function Invoke-PullRepository {",
                    "    param(",
                    "        [string]$Url,",
                    "        [string]$Name,",
                    "        [string]$Branch,",
                    "        [string]$Destination",
                    "    )",
                    "    ",
                    "    Write-Log \"Starting pull operation for: $Name\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        if (!(Test-Path \"$Destination\\.git\")) {",
                    "            Write-Log \"⚠️ Repository not found at: $Destination\" \"WARNING\"",
                    "            return 'skipped'",
                    "        }",
                    "        ",
                    "        Push-Location $Destination",
                    "        ",
                    "        # Get current branch",
                    "        $currentBranch = & git rev-parse --abbrev-ref HEAD",
                    "        Write-Log \"Current branch: $currentBranch\" \"INFO\"",
                    "        ",
                    "        # Check for uncommitted changes",
                    "        $status = & git status --porcelain",
                    "        if ($status) {",
                    "            Write-Log \"⚠️ Uncommitted changes detected. Stashing...\" \"WARNING\"",
                    "            & git stash push -m \"Auto-stash before pull $(Get-Date -Format 'yyyyMMdd-HHmmss')\"",
                    "        }",
                    "        ",
                    "        # Pull latest changes",
                    "        Write-Log \"Pulling latest changes from origin/$currentBranch\" \"INFO\"",
                    "        $pullOutput = & git pull origin $currentBranch 2>&1",
                    "        ",
                    "        if ($LASTEXITCODE -eq 0) {",
                    "            Write-Log \"✅ Successfully pulled latest changes for: $Name\" \"SUCCESS\"",
                    "            ",
                    "            # Get updated repository info",
                    "            $commitHash = & git rev-parse HEAD",
                    "            $commitDate = & git log -1 --format=%ai",
                    "            Write-Log \"  Latest commit: $commitHash\" \"INFO\"",
                    "            Write-Log \"  Commit date: $commitDate\" \"INFO\"",
                    "            ",
                    "            Pop-Location",
                    "            return 'success'",
                    "        } else {",
                    "            Write-Log \"❌ Failed to pull changes: $pullOutput\" \"ERROR\"",
                    "            Pop-Location",
                    "            return 'failed'",
                    "        }",
                    "    }",
                    "    catch {",
                    "        Write-Log \"❌ Exception while pulling $Name : $_\" \"ERROR\"",
                    "        Pop-Location -ErrorAction SilentlyContinue",
                    "        return 'failed'",
                    "    }",
                    "}",
                    "",
                    "# Main execution",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Starting Repository $Operation Process\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Refresh environment variables from registry first",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"Refreshing environment variables...\" \"INFO\"",
                    "Refresh-EnvironmentVariables",
                    "",
                    "# Check if Git is installed",
                    "if (!(Test-GitInstalled)) {",
                    "    Write-Log \"\" \"ERROR\"",
                    "    Write-Log \"========================================\" \"ERROR\"",
                    "    Write-Log \"GIT IS NOT INSTALLED OR NOT ACCESSIBLE\" \"ERROR\"",
                    "    Write-Log \"========================================\" \"ERROR\"",
                    "    Write-Log \"Git is required for repository operations.\" \"ERROR\"",
                    "    Write-Log \"Please install Git for Windows from:\" \"ERROR\"",
                    "    Write-Log \"  $GitInstallerUrl\" \"ERROR\"",
                    "    Write-Log \"\" \"ERROR\"",
                    "    Write-Log \"Installation instructions:\" \"ERROR\"",
                    "    Write-Log \"  1. Download Git from the URL above\" \"ERROR\"",
                    "    Write-Log \"  2. Run the installer with administrator privileges\" \"ERROR\"",
                    "    Write-Log \"  3. Follow the installation wizard\" \"ERROR\"",
                    "    Write-Log \"  4. Restart this SSM document after installation\" \"ERROR\"",
                    "    Write-Log \"\" \"ERROR\"",
                    "    Write-Log \"Current PATH after refresh:\" \"ERROR\"",
                    "    Write-Log \"  $env:PATH\" \"ERROR\"",
                    "    Write-Log \"========================================\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Final Git verification",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"Final Git verification...\" \"INFO\"",
                    "try {",
                    "    $finalGitVersion = & git --version 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"✅ Git is working correctly: $finalGitVersion\" \"SUCCESS\"",
                    "        $gitPath = (Get-Command git -ErrorAction SilentlyContinue).Source",
                    "        Write-Log \"Git executable path: $gitPath\" \"INFO\"",
                    "    } else {",
                    "        Write-Log \"❌ Git verification failed\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Git verification error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Validate parameters",
                    "if (!(Test-RepositoryParameters)) {",
                    "    Write-Log \"❌ Invalid repository parameters\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Process the repository",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"Processing repository: $RepoName\" \"INFO\"",
                    "Write-Log \"\" \"INFO\"",
                    "",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"----------------------------------------\" \"INFO\"",
                    "Write-Log \"Repository: $RepoName\" \"INFO\"",
                    "Write-Log \"----------------------------------------\" \"INFO\"",
                    "",
                    "# Perform operation based on type",
                    "$result = 'failed'",
                    "switch ($Operation.ToLower()) {",
                    "    'clone' {",
                    "        $result = Invoke-CloneRepository -Url $RepoUrl -Name $RepoName -Branch $RepoBranch -Destination $RepoDestination",
                    "    }",
                    "    'update' {",
                    "        $result = Invoke-UpdateRepository -Url $RepoUrl -Name $RepoName -Branch $RepoBranch -Destination $RepoDestination",
                    "    }",
                    "    'pull' {",
                    "        $result = Invoke-PullRepository -Url $RepoUrl -Name $RepoName -Branch $RepoBranch -Destination $RepoDestination",
                    "    }",
                    "    default {",
                    "        Write-Log \"❌ Unknown operation: $Operation\" \"ERROR\"",
                    "        $result = 'failed'",
                    "    }",
                    "}",
                    "",
                    "# Final summary",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Repository $Operation Summary\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Repository: $RepoName\" \"INFO\"",
                    "Write-Log \"Operation: $Operation\" \"INFO\"",
                    "Write-Log \"Result: $result\" \"INFO\"",
                    "Write-Log \"Log file: $LogFile\" \"INFO\"",
                    "",
                    "switch ($result) {",
                    "    'success' {",
                    "        Write-Log \"✅ Repository $Operation completed successfully!\" \"SUCCESS\"",
                    "        Write-Log \"Script execution completed successfully\" \"SUCCESS\"",
                    "        Write-Host \"SUCCESS: Repository $Operation completed successfully!\"",
                    "        exit 0",
                    "    }",
                    "    'skipped' {",
                    "        Write-Log \"⚠️ Repository $Operation was skipped\" \"WARNING\"",
                    "        Write-Log \"Script execution completed with warnings\" \"WARNING\"",
                    "        Write-Host \"WARNING: Repository $Operation was skipped\"",
                    "        exit 0",
                    "    }",
                    "    'failed' {",
                    "        Write-Log \"❌ Repository $Operation failed\" \"ERROR\"",
                    "        Write-Log \"Script execution failed\" \"ERROR\"",
                    "        Write-Host \"ERROR: Repository $Operation failed\"",
                    "        exit 1",
                    "    }",
                    "    default {",
                    "        Write-Log \"❌ Unknown result: $result\" \"ERROR\"",
                    "        Write-Log \"Script execution failed with unknown result\" \"ERROR\"",
                    "        Write-Host \"ERROR: Unknown result: $result\"",
                    "        exit 1",
                    "    }",
                    "}",
                    "",
                    "# Final fallback - this should never be reached",
                    "Write-Log \"Script reached unexpected end\" \"ERROR\"",
                    "Write-Host \"ERROR: Script reached unexpected end\"",
                    "exit 1"
                ]
            }
        }
    ]
}