{
    "schemaVersion": "2.2",
    "description": "Build OpenSSL from source on Windows following the official build steps",
    "parameters": {
        "opensslRepoPath": {
            "type": "String",
            "description": "Path to the cloned OpenSSL repository",
            "default": "D:\\UnrealEngine\\OpenSSL"
        },
        "buildType": {
            "type": "String",
            "description": "Build type (Release or Debug)",
            "default": "Release",
            "allowedValues": [
                "Release",
                "Debug"
            ]
        },
        "architecture": {
            "type": "String",
            "description": "Target architecture",
            "default": "x64",
            "allowedValues": [
                "x86",
                "x64",
                "ARM",
                "ARM64"
            ]
        },
        "installPath": {
            "type": "String",
            "description": "Installation path for OpenSSL",
            "default": "C:\\OpenSSL"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "buildOpenSSL",
            "inputs": {
                "timeoutSeconds": "3600",
                "runCommand": [
                    "# OpenSSL Build Script for Windows",
                    "# Following steps 1-6 from https://github.com/openssl/openssl/blob/master/NOTES-WINDOWS.md",
                    "",
                    "# Get parameters from SSM",
                    "$OpenSSLRepoPath = '{{ opensslRepoPath }}'",
                    "$BuildType = '{{ buildType }}'",
                    "$Architecture = '{{ architecture }}'",
                    "$InstallPath = '{{ installPath }}'",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\openssl-build-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Debug: Print all parameter values",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"OpenSSL Build Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"OpenSSLRepoPath: $OpenSSLRepoPath\" \"INFO\"",
                    "Write-Log \"BuildType: $BuildType\" \"INFO\"",
                    "Write-Log \"Architecture: $Architecture\" \"INFO\"",
                    "Write-Log \"InstallPath: $InstallPath\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "# Step 1: Check if OpenSSL repository exists",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 1: Checking OpenSSL Repository\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "if (!(Test-Path $OpenSSLRepoPath)) {",
                    "    Write-Log \"❌ OpenSSL repository not found at: $OpenSSLRepoPath\" \"ERROR\"",
                    "    Write-Log \"Please ensure the repository is cloned first\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "Write-Log \"✅ OpenSSL repository found at: $OpenSSLRepoPath\" \"SUCCESS\"",
                    "",
                    "# Step 2: Check for required build tools",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 2: Checking Build Tools\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Check for Visual Studio Build Tools",
                    "Write-Log \"Checking for Visual Studio Build Tools...\" \"INFO\"",
                    "$vsWherePath = \"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"",
                    "if (Test-Path $vsWherePath) {",
                    "    try {",
                    "        $vsInstallations = & $vsWherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath",
                    "        if ($vsInstallations) {",
                    "            Write-Log \"✅ Visual Studio Build Tools found: $vsInstallations\" \"SUCCESS\"",
                    "            $VSPath = $vsInstallations",
                    "        } else {",
                    "            Write-Log \"⚠️ Visual Studio Build Tools not found, checking for standalone build tools...\" \"WARNING\"",
                    "            $vsInstallations = & $vsWherePath -latest -products * -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath",
                    "            if ($vsInstallations) {",
                    "                Write-Log \"✅ Visual Studio Build Tools (standalone) found: $vsInstallations\" \"SUCCESS\"",
                    "                $VSPath = $vsInstallations",
                    "            } else {",
                    "                Write-Log \"❌ No suitable Visual Studio Build Tools found\" \"ERROR\"",
                    "                exit 1",
                    "            }",
                    "        }",
                    "    } catch {",
                    "        Write-Log \"❌ Error checking Visual Studio Build Tools: $_\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} else {",
                    "    Write-Log \"❌ vswhere.exe not found. Visual Studio may not be installed.\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Check for Perl (required for OpenSSL build)",
                    "Write-Log \"Checking for Perl...\" \"INFO\"",
                    "try {",
                    "    $perlVersion = & perl --version 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"✅ Perl found: $($perlVersion[0])\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ Perl not found. Please install Strawberry Perl or ActivePerl\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Perl not found. Please install Strawberry Perl or ActivePerl\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Check for NASM (required for OpenSSL build)",
                    "Write-Log \"Checking for NASM...\" \"INFO\"",
                    "try {",
                    "    $nasmVersion = & nasm --version 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"✅ NASM found: $($nasmVersion[0])\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ NASM not found. Please install NASM\" \"ERROR\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ NASM not found. Please install NASM\" \"ERROR\"",
                    "}",
                    "",
                    "# Step 3: Set up Visual Studio environment",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 3: Setting up Visual Studio Environment\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Find and run vcvarsall.bat to set up the build environment",
                    "$VcVarsPath = Join-Path $VSPath \"VC\\Auxiliary\\Build\\vcvarsall.bat\"",
                    "if (Test-Path $VcVarsPath) {",
                    "    Write-Log \"Setting up Visual Studio environment using: $VcVarsPath\" \"INFO\"",
                    "    ",
                    "    # Determine the architecture parameter for vcvarsall.bat",
                    "    $VcVarsArch = switch ($Architecture) {",
                    "        \"x86\" { \"x86\" }",
                    "        \"x64\" { \"x64\" }",
                    "        \"ARM\" { \"x86_arm\" }",
                    "        \"ARM64\" { \"x86_arm64\" }",
                    "        default { \"x64\" }",
                    "    }",
                    "    ",
                    "    Write-Log \"Using architecture: $VcVarsArch\" \"INFO\"",
                    "    ",
                    "    # Create a temporary batch file to set up the environment",
                    "    $TempBatchFile = \"$env:TEMP\\setup_vs_env.bat\"",
                    "    $BatchContent = @\"",
                    "@echo off",
                    "call \"$VcVarsPath\" $VcVarsArch",
                    "echo Environment setup complete",
                    "\"@",
                    "    $BatchContent | Out-File -FilePath $TempBatchFile -Encoding ASCII",
                    "    ",
                    "    # Execute the batch file and capture the environment",
                    "    Write-Log \"Executing Visual Studio environment setup...\" \"INFO\"",
                    "    $envSetup = cmd /c \"$TempBatchFile && set\"",
                    "    ",
                    "    # Apply the environment variables",
                    "    foreach ($line in $envSetup) {",
                    "        if ($line -match '^([^=]+)=(.*)$') {",
                    "            $name = $matches[1]",
                    "            $value = $matches[2]",
                    "            if ($name -match '^(PATH|INCLUDE|LIB|LIBPATH)$') {",
                    "                [Environment]::SetEnvironmentVariable($name, $value, 'Process')",
                    "                $env:$name = $value",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    Write-Log \"✅ Visual Studio environment setup completed\" \"SUCCESS\"",
                    "    ",
                    "    # Clean up temporary file",
                    "    Remove-Item $TempBatchFile -Force -ErrorAction SilentlyContinue",
                    "} else {",
                    "    Write-Log \"❌ vcvarsall.bat not found at: $VcVarsPath\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Step 4: Configure OpenSSL build",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 4: Configuring OpenSSL Build\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Change to OpenSSL directory",
                    "Set-Location $OpenSSLRepoPath",
                    "Write-Log \"Changed to OpenSSL directory: $OpenSSLRepoPath\" \"INFO\"",
                    "",
                    "# Clean previous build if it exists",
                    "if (Test-Path \"build\") {",
                    "    Write-Log \"Cleaning previous build directory...\" \"INFO\"",
                    "    Remove-Item -Path \"build\" -Recurse -Force",
                    "}",
                    "",
                    "# Create build directory",
                    "New-Item -ItemType Directory -Path \"build\" -Force | Out-Null",
                    "Set-Location \"build\"",
                    "Write-Log \"Created and changed to build directory\" \"INFO\"",
                    "",
                    "# Configure OpenSSL build",
                    "Write-Log \"Configuring OpenSSL build...\" \"INFO\"",
                    "$ConfigureArgs = @(",
                    "    \"--prefix=$InstallPath\",",
                    "    \"--openssldir=$InstallPath\\ssl\"",
                    ")",
                    "",
                    "# Add architecture-specific options",
                    "switch ($Architecture) {",
                    "    \"x86\" {",
                    "        $ConfigureArgs += @(\"--debug\" = $($BuildType -eq \"Debug\"))",
                    "    }",
                    "    \"x64\" {",
                    "        $ConfigureArgs += @(\"--debug\" = $($BuildType -eq \"Debug\"))",
                    "    }",
                    "    \"ARM\" {",
                    "        $ConfigureArgs += @(\"--debug\" = $($BuildType -eq \"Debug\"))",
                    "    }",
                    "    \"ARM64\" {",
                    "        $ConfigureArgs += @(\"--debug\" = $($BuildType -eq \"Debug\"))",
                    "    }",
                    "}",
                    "",
                    "# Add build type specific options",
                    "if ($BuildType -eq \"Debug\") {",
                    "    $ConfigureArgs += @(\"--debug\")",
                    "} else {",
                    "    $ConfigureArgs += @(\"--release\")",
                    "}",
                    "",
                    "$ConfigureCommand = \"perl ..\\Configure VC-WIN64A @ConfigureArgs\"",
                    "Write-Log \"Executing: $ConfigureCommand\" \"INFO\"",
                    "",
                    "try {",
                    "    $configureResult = Invoke-Expression $ConfigureCommand 2>&1",
                    "    $configureExitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"Configure exit code: $configureExitCode\" \"INFO\"",
                    "    Write-Log \"Configure output: $configureResult\" \"INFO\"",
                    "    ",
                    "    if ($configureExitCode -eq 0) {",
                    "        Write-Log \"✅ OpenSSL configuration completed successfully\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ OpenSSL configuration failed\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ OpenSSL configuration error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Step 5: Build OpenSSL",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 5: Building OpenSSL\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "Write-Log \"Starting OpenSSL build process...\" \"INFO\"",
                    "Write-Log \"This may take several minutes...\" \"INFO\"",
                    "",
                    "try {",
                    "    # Build OpenSSL using nmake",
                    "    $buildResult = & nmake 2>&1",
                    "    $buildExitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"Build exit code: $buildExitCode\" \"INFO\"",
                    "    ",
                    "    if ($buildExitCode -eq 0) {",
                    "        Write-Log \"✅ OpenSSL build completed successfully\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ OpenSSL build failed\" \"ERROR\"",
                    "        Write-Log \"Build output: $buildResult\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ OpenSSL build error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Step 6: Test OpenSSL build",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Step 6: Testing OpenSSL Build\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "Write-Log \"Running OpenSSL tests...\" \"INFO\"",
                    "",
                    "try {",
                    "    $testResult = & nmake test 2>&1",
                    "    $testExitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"Test exit code: $testExitCode\" \"INFO\"",
                    "    ",
                    "    if ($testExitCode -eq 0) {",
                    "        Write-Log \"✅ OpenSSL tests passed successfully\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"⚠️ OpenSSL tests failed or had issues\" \"WARNING\"",
                    "        Write-Log \"Test output: $testResult\" \"WARNING\"",
                    "        # Don't exit on test failure, as the build might still be usable",
                    "    }",
                    "} catch {",
                    "    Write-Log \"⚠️ OpenSSL test error: $_\" \"WARNING\"",
                    "    # Don't exit on test error, as the build might still be usable",
                    "}",
                    "",
                    "# Install OpenSSL",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Installing OpenSSL\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "Write-Log \"Installing OpenSSL to: $InstallPath\" \"INFO\"",
                    "",
                    "try {",
                    "    $installResult = & nmake install 2>&1",
                    "    $installExitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"Install exit code: $installExitCode\" \"INFO\"",
                    "    ",
                    "    if ($installExitCode -eq 0) {",
                    "        Write-Log \"✅ OpenSSL installation completed successfully\" \"SUCCESS\"",
                    "        ",
                    "        # Verify installation",
                    "        if (Test-Path $InstallPath) {",
                    "            $installSize = (Get-ChildItem $InstallPath -Recurse | Measure-Object -Property Length -Sum).Sum",
                    "            $installSizeMB = [math]::Round($installSize / 1MB, 2)",
                    "            Write-Log \"Installation verified at: $InstallPath\" \"SUCCESS\"",
                    "            Write-Log \"Installation size: $installSizeMB MB\" \"SUCCESS\"",
                    "        }",
                    "    } else {",
                    "        Write-Log \"❌ OpenSSL installation failed\" \"ERROR\"",
                    "        Write-Log \"Install output: $installResult\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ OpenSSL installation error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Final summary",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"OpenSSL Build Summary\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"✅ OpenSSL build and installation completed successfully!\" \"SUCCESS\"",
                    "Write-Log \"Repository Path: $OpenSSLRepoPath\" \"INFO\"",
                    "Write-Log \"Build Type: $BuildType\" \"INFO\"",
                    "Write-Log \"Architecture: $Architecture\" \"INFO\"",
                    "Write-Log \"Installation Path: $InstallPath\" \"INFO\"",
                    "Write-Log \"Log File: $LogFile\" \"INFO\"",
                    "",
                    "Write-Log \"OpenSSL is now ready for use!\" \"SUCCESS\""
                ]
            }
        }
    ]
}