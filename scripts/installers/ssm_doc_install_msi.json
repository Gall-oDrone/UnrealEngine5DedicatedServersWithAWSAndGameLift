{
    "schemaVersion": "2.2",
    "description": "Install MSI software package from local path with enhanced error handling and logging",
    "parameters": {
        "installerPath": {
            "type": "String",
            "description": "Full path to the MSI installer file",
            "allowedPattern": "^[A-Za-z]:\\\\[^<>:\"|?*]+\\.msi$"
        },
        "softwareName": {
            "type": "String",
            "description": "Name of the software being installed",
            "allowedPattern": "^[a-zA-Z0-9\\s\\-_\\.]+$"
        },
        "installArgs": {
            "type": "String",
            "description": "MSI installation arguments",
            "default": "/quiet /norestart",
            "allowedPattern": "^[a-zA-Z0-9\\s/=\\-_\"']+$"
        },
        "destinationPath": {
            "type": "String",
            "description": "Installation destination directory",
            "default": "C:\\Program Files",
            "allowedPattern": "^[A-Za-z]:\\\\[^<>:\"|?*]+$"
        },
        "logLevel": {
            "type": "String",
            "description": "MSI logging level",
            "default": "*v",
            "allowedValues": [
                "",
                "*",
                "*v",
                "*x",
                "*+",
                "*!"
            ]
        },
        "timeoutSeconds": {
            "type": "String",
            "description": "Installation timeout in seconds",
            "default": "900",
            "allowedPattern": "^[0-9]+$"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "installMSISoftware",
            "inputs": {
                "timeoutSeconds": "{{ timeoutSeconds }}",
                "runCommand": [
                    "# Enhanced MSI Installation Script",
                    "# Based on proven patterns for CMake and other MSI installers",
                    "",
                    "param(",
                    "    [string]$InstallerPath = '{{ installerPath }}',",
                    "    [string]$SoftwareName = '{{ softwareName }}',",
                    "    [string]$InstallArgs = '{{ installArgs }}',",
                    "    [string]$DestinationPath = '{{ destinationPath }}',",
                    "    [string]$LogLevel = '{{ logLevel }}'",
                    ")",
                    "",
                    "# Set error action preference",
                    "$ErrorActionPreference = 'Stop'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Force -Path $LogDir -ErrorAction SilentlyContinue | Out-Null",
                    "}",
                    "",
                    "$Timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'",
                    "$InstallLogFile = \"$LogDir\\$($SoftwareName -replace '[\\s\\W]','_')-install-$Timestamp.log\"",
                    "$MsiLogFile = \"$LogDir\\$($SoftwareName -replace '[\\s\\W]','_')-msi-$Timestamp.log\"",
                    "",
                    "# Start transcript",
                    "Start-Transcript -Path $InstallLogFile -Append",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = 'INFO')",
                    "    $LogTimestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "    $LogEntry = \"[$LogTimestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    if ($Level -eq 'ERROR') {",
                    "        Write-Host $LogEntry -ForegroundColor Red",
                    "    } elseif ($Level -eq 'WARNING') {",
                    "        Write-Host $LogEntry -ForegroundColor Yellow",
                    "    } elseif ($Level -eq 'SUCCESS') {",
                    "        Write-Host $LogEntry -ForegroundColor Green",
                    "    } else {",
                    "        Write-Host $LogEntry",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"Starting MSI installation for $SoftwareName\" \"INFO\"",
                    "Write-Log \"Installer: $InstallerPath\" \"INFO\"",
                    "Write-Log \"Arguments: $InstallArgs\" \"INFO\"",
                    "Write-Log \"Destination: $DestinationPath\" \"INFO\"",
                    "",
                    "# Validate installer file",
                    "if (!(Test-Path $InstallerPath)) {",
                    "    Write-Log \"Installer file not found: $InstallerPath\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "try {",
                    "    $FileInfo = Get-Item $InstallerPath",
                    "    $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "    Write-Log \"Installer file size: $FileSizeMB MB\" \"INFO\"",
                    "    Write-Log \"File created: $($FileInfo.CreationTime)\" \"INFO\"",
                    "    Write-Log \"File modified: $($FileInfo.LastWriteTime)\" \"INFO\"",
                    "    ",
                    "    # Verify it's an MSI file",
                    "    if ($FileInfo.Extension -ne '.msi') {",
                    "        Write-Log \"Warning: File extension is not .msi: $($FileInfo.Extension)\" \"WARNING\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Error reading file properties: $_\" \"WARNING\"",
                    "}",
                    "",
                    "# Create destination directory if needed",
                    "if (!(Test-Path $DestinationPath)) {",
                    "    try {",
                    "        New-Item -ItemType Directory -Force -Path $DestinationPath | Out-Null",
                    "        Write-Log \"Created destination directory: $DestinationPath\" \"INFO\"",
                    "    } catch {",
                    "        Write-Log \"Failed to create destination directory: $_\" \"ERROR\"",
                    "        Stop-Transcript",
                    "        exit 1",
                    "    }",
                    "}",
                    "",
                    "# Build MSI arguments",
                    "$msiArgs = @()",
                    "$msiArgs += '/i'",
                    "$msiArgs += \"`\"$InstallerPath`\"\"",
                    "",
                    "# Add custom installation arguments",
                    "if ($InstallArgs) {",
                    "    $InstallArgs.Split(' ') | ForEach-Object {",
                    "        if ($_.Trim()) {",
                    "            $msiArgs += $_.Trim()",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "# Add installation directory if applicable",
                    "if ($DestinationPath -and $DestinationPath -ne 'C:\\Program Files') {",
                    "    $msiArgs += \"INSTALLDIR=`\"$DestinationPath`\"\"",
                    "}",
                    "",
                    "# Add logging if specified",
                    "if ($LogLevel) {",
                    "    $msiArgs += \"/l$LogLevel\"",
                    "    $msiArgs += \"`\"$MsiLogFile`\"\"",
                    "}",
                    "",
                    "Write-Log \"MSI command: msiexec.exe $($msiArgs -join ' ')\" \"INFO\"",
                    "",
                    "# Execute installation",
                    "Write-Log \"Starting installation process...\" \"INFO\"",
                    "$StartTime = Get-Date",
                    "",
                    "try {",
                    "    $Process = Start-Process -FilePath 'msiexec.exe' -ArgumentList $msiArgs -Wait -PassThru -NoNewWindow",
                    "    $EndTime = Get-Date",
                    "    $Duration = $EndTime - $StartTime",
                    "    ",
                    "    Write-Log \"Installation completed in $([math]::Round($Duration.TotalMinutes, 2)) minutes\" \"INFO\"",
                    "    Write-Log \"Exit code: $($Process.ExitCode)\" \"INFO\"",
                    "    ",
                    "    # Interpret exit codes",
                    "    switch ($Process.ExitCode) {",
                    "        0 {",
                    "            Write-Log \"Installation completed successfully\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        3010 {",
                    "            Write-Log \"Installation completed successfully (reboot required)\" \"SUCCESS\"",
                    "            Write-Log \"A system reboot is required to complete the installation\" \"WARNING\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1602 {",
                    "            Write-Log \"Installation cancelled by user\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1603 {",
                    "            Write-Log \"Fatal error during installation\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1605 {",
                    "            Write-Log \"This action is only valid for products that are currently installed\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1618 {",
                    "            Write-Log \"Another installation is already in progress\" \"ERROR\"",
                    "            Write-Log \"Please wait for the other installation to complete\" \"INFO\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1619 {",
                    "            Write-Log \"Installation package could not be opened\" \"ERROR\"",
                    "            Write-Log \"Verify that the package exists and is accessible\" \"INFO\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1620 {",
                    "            Write-Log \"Installation package could not be opened (invalid package)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1633 {",
                    "            Write-Log \"This installation package is not supported on this platform\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1638 {",
                    "            Write-Log \"Another version of this product is already installed\" \"WARNING\"",
                    "            Write-Log \"Installation cannot continue\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        default {",
                    "            if ($Process.ExitCode -gt 0) {",
                    "                Write-Log \"Installation failed with exit code: $($Process.ExitCode)\" \"ERROR\"",
                    "                $ExitStatus = 1",
                    "            } else {",
                    "                Write-Log \"Installation completed with exit code: $($Process.ExitCode)\" \"WARNING\"",
                    "                $ExitStatus = 0",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    # Verify installation",
                    "    Write-Log \"Verifying installation...\" \"INFO\"",
                    "    ",
                    "    # Check if software was installed to destination",
                    "    $InstalledFiles = Get-ChildItem -Path $DestinationPath -ErrorAction SilentlyContinue | ",
                    "                      Where-Object { $_.LastWriteTime -gt $StartTime }",
                    "    ",
                    "    if ($InstalledFiles) {",
                    "        Write-Log \"Found $($InstalledFiles.Count) new files/folders in $DestinationPath\" \"INFO\"",
                    "        Write-Log \"Installation appears successful\" \"SUCCESS\"",
                    "    } elseif ($Process.ExitCode -eq 0 -or $Process.ExitCode -eq 3010) {",
                    "        Write-Log \"Installation completed but no new files detected in $DestinationPath\" \"WARNING\"",
                    "        Write-Log \"Software may have been installed to a different location\" \"INFO\"",
                    "    }",
                    "    ",
                    "    # Check MSI log for errors if available",
                    "    if ($LogLevel -and (Test-Path $MsiLogFile)) {",
                    "        $ErrorLines = Select-String -Path $MsiLogFile -Pattern \"Error|Failed\" -Context 0,2",
                    "        if ($ErrorLines) {",
                    "            Write-Log \"Errors found in MSI log:\" \"WARNING\"",
                    "            $ErrorLines | ForEach-Object { Write-Log $_.Line \"WARNING\" }",
                    "        }",
                    "    }",
                    "    ",
                    "} catch {",
                    "    Write-Log \"Installation error: $_\" \"ERROR\"",
                    "    Write-Log \"Exception details: $($_.Exception.Message)\" \"ERROR\"",
                    "    $ExitStatus = 1",
                    "} finally {",
                    "    # Log final status",
                    "    Write-Log \"Installation process completed with status: $ExitStatus\" \"INFO\"",
                    "    ",
                    "    # Display log locations",
                    "    Write-Log \"Installation log: $InstallLogFile\" \"INFO\"",
                    "    if ($LogLevel -and (Test-Path $MsiLogFile)) {",
                    "        Write-Log \"MSI log: $MsiLogFile\" \"INFO\"",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"$SoftwareName MSI installation script completed\" \"INFO\"",
                    "Stop-Transcript",
                    "exit $ExitStatus"
                ]
            }
        }
    ]
}