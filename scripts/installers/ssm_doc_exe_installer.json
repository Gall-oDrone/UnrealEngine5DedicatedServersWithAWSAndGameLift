{
    "schemaVersion": "2.2",
    "description": "Download and install EXE packages from S3 bucket",
    "parameters": {
        "bucketName": {
            "type": "String",
            "description": "S3 bucket name containing the EXE installer",
            "allowedPattern": "^[a-zA-Z0-9.-]+$"
        },
        "objectKey": {
            "type": "String",
            "description": "S3 object key (path) to the EXE installer",
            "allowedPattern": "^[a-zA-Z0-9!_.*'()/\\-]+$"
        },
        "installArgs": {
            "type": "String",
            "description": "EXE installation arguments for silent installation",
            "default": "/S",
            "allowedPattern": "^[a-zA-Z0-9\\s/=\\-_\"']+$"
        },
        "timeoutSeconds": {
            "type": "String",
            "description": "Installation timeout in seconds",
            "default": "1800",
            "allowedPattern": "^[0-9]+$"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadAndInstallEXE",
            "inputs": {
                "timeoutSeconds": "{{ timeoutSeconds }}",
                "runCommand": [
                    "# EXE Installer Deployment Script",
                    "param(",
                    "    [string]$BucketName = '{{ bucketName }}',",
                    "    [string]$ObjectKey = '{{ objectKey }}',",
                    "    [string]$InstallArgs = '{{ installArgs }}'",
                    ")",
                    "",
                    "# Set up logging",
                    "$LogDir = 'C:\\logs'",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\exe-installer.log\"",
                    "$Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = 'INFO')",
                    "    $LogTimestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "    $LogEntry = \"[$LogTimestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "Write-Log \"Starting EXE installation process\" \"INFO\"",
                    "Write-Log \"Bucket: $BucketName\" \"INFO\"",
                    "Write-Log \"Object Key: $ObjectKey\" \"INFO\"",
                    "Write-Log \"Install Args: $InstallArgs\" \"INFO\"",
                    "",
                    "# Extract filename from S3 key",
                    "$FileName = Split-Path $ObjectKey -Leaf",
                    "$TempDir = 'C:\\temp'",
                    "$LocalPath = \"$TempDir\\$FileName\"",
                    "",
                    "# Create temp directory",
                    "try {",
                    "    if (!(Test-Path $TempDir)) {",
                    "        New-Item -ItemType Directory -Path $TempDir -Force | Out-Null",
                    "        Write-Log \"Created temp directory: $TempDir\" \"INFO\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to create temp directory: $($_.Exception.Message)\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Download from S3",
                    "Write-Log \"Downloading installer from S3...\" \"INFO\"",
                    "try {",
                    "    Copy-S3Object -BucketName $BucketName -Key $ObjectKey -LocalFile $LocalPath -Force",
                    "    ",
                    "    if (Test-Path $LocalPath) {",
                    "        $FileSize = [math]::Round((Get-Item $LocalPath).Length / 1MB, 2)",
                    "        Write-Log \"Downloaded successfully: $LocalPath ($FileSize MB)\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"Downloaded file not found: $LocalPath\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to download from S3: $($_.Exception.Message)\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Verify file is executable",
                    "try {",
                    "    $FileInfo = Get-ItemProperty $LocalPath",
                    "    if ($FileInfo.Extension -ne '.exe') {",
                    "        Write-Log \"Warning: File extension is not .exe: $($FileInfo.Extension)\" \"WARNING\"",
                    "    }",
                    "    ",
                    "    # Check if file is digitally signed (optional security check)",
                    "    $Signature = Get-AuthenticodeSignature $LocalPath",
                    "    if ($Signature.Status -eq 'Valid') {",
                    "        Write-Log \"File is digitally signed and valid\" \"INFO\"",
                    "    } elseif ($Signature.Status -eq 'NotSigned') {",
                    "        Write-Log \"Warning: File is not digitally signed\" \"WARNING\"",
                    "    } else {",
                    "        Write-Log \"Warning: File signature status: $($Signature.Status)\" \"WARNING\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Could not verify file properties: $($_.Exception.Message)\" \"WARNING\"",
                    "}",
                    "",
                    "# Install EXE",
                    "Write-Log \"Starting EXE installation...\" \"INFO\"",
                    "Write-Log \"Command: $LocalPath $InstallArgs\" \"INFO\"",
                    "",
                    "try {",
                    "    $StartTime = Get-Date",
                    "    ",
                    "    # Parse install arguments",
                    "    $ProcessArgs = @()",
                    "    if ($InstallArgs -and $InstallArgs.Trim() -ne '') {",
                    "        $InstallArgs.Split(' ') | ForEach-Object {",
                    "            if ($_.Trim() -ne '') {",
                    "                $ProcessArgs += $_.Trim()",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    $Process = Start-Process -FilePath $LocalPath -ArgumentList $ProcessArgs -Wait -PassThru -NoNewWindow",
                    "    ",
                    "    $EndTime = Get-Date",
                    "    $Duration = $EndTime - $StartTime",
                    "    ",
                    "    Write-Log \"Installation completed in $([math]::Round($Duration.TotalMinutes, 2)) minutes\" \"INFO\"",
                    "    Write-Log \"Exit code: $($Process.ExitCode)\" \"INFO\"",
                    "    ",
                    "    # Check exit code (common patterns for different installer types)",
                    "    switch ($Process.ExitCode) {",
                    "        0 {",
                    "            Write-Log \"Installation completed successfully\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1 {",
                    "            # Could be success for some installers or generic error",
                    "            Write-Log \"Installation completed with exit code 1 (check installer documentation)\" \"WARNING\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        3010 {",
                    "            Write-Log \"Installation completed successfully (reboot required)\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1602 {",
                    "            Write-Log \"Installation cancelled by user\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1603 {",
                    "            Write-Log \"Installation failed (fatal error)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1618 {",
                    "            Write-Log \"Another installation is in progress\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1620 {",
                    "            Write-Log \"Installation package could not be opened\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1633 {",
                    "            Write-Log \"Installation failed (unsupported platform)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        default {",
                    "            if ($Process.ExitCode -lt 0 -or $Process.ExitCode -gt 1) {",
                    "                Write-Log \"Installation failed with exit code: $($Process.ExitCode)\" \"ERROR\"",
                    "                $ExitStatus = 1",
                    "            } else {",
                    "                Write-Log \"Installation completed with exit code: $($Process.ExitCode)\" \"INFO\"",
                    "                $ExitStatus = 0",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    # Additional check: verify if common installation paths exist",
                    "    $CommonPaths = @(",
                    "        'C:\\Program Files',",
                    "        'C:\\Program Files (x86)'",
                    "    )",
                    "    ",
                    "    $InstallationDetected = $false",
                    "    foreach ($Path in $CommonPaths) {",
                    "        if (Test-Path $Path) {",
                    "            $RecentItems = Get-ChildItem $Path | Where-Object { $_.LastWriteTime -gt $StartTime }",
                    "            if ($RecentItems) {",
                    "                $InstallationDetected = $true",
                    "                Write-Log \"Detected new/modified items in $Path\" \"INFO\"",
                    "                break",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    if ($InstallationDetected) {",
                    "        Write-Log \"Installation artifacts detected in Program Files\" \"INFO\"",
                    "    }",
                    "    ",
                    "} catch {",
                    "    Write-Log \"Installation error: $($_.Exception.Message)\" \"ERROR\"",
                    "    $ExitStatus = 1",
                    "} finally {",
                    "    # Cleanup downloaded file",
                    "    try {",
                    "        if (Test-Path $LocalPath) {",
                    "            Remove-Item $LocalPath -Force",
                    "            Write-Log \"Cleaned up installer file: $LocalPath\" \"INFO\"",
                    "        }",
                    "    } catch {",
                    "        Write-Log \"Failed to cleanup file: $($_.Exception.Message)\" \"WARNING\"",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"EXE installation process completed\" \"INFO\"",
                    "exit $ExitStatus"
                ]
            }
        }
    ]
}