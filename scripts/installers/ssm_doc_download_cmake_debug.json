{
    "schemaVersion": "2.2",
    "description": "Debug: Download CMake from S3 access point",
    "parameters": {
        "s3BucketArn": {
            "type": "String",
            "description": "S3 access point ARN",
            "allowedPattern": "^arn:aws:s3:[a-z0-9-]+:[0-9]+:accesspoint/[a-zA-Z0-9-]+$"
        },
        "softwareKey": {
            "type": "String",
            "description": "S3 object key for CMake installer"
        },
        "softwareName": {
            "type": "String",
            "description": "Software name (CMake)"
        },
        "downloadPath": {
            "type": "String",
            "description": "Destination path for download"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadCMake",
            "inputs": {
                "timeoutSeconds": "1800",
                "runCommand": [
                    "# Debug: CMake Download Script",
                    "",
                    "# Get parameters from SSM",
                    "$S3BucketArn = '{{ s3BucketArn }}'",
                    "$SoftwareKey = '{{ softwareKey }}'",
                    "$SoftwareName = '{{ softwareName }}'",
                    "$DownloadPath = '{{ downloadPath }}'",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\cmake-download-debug-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "# Start transcript for detailed logging",
                    "Start-Transcript -Path $LogFile -Append",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Debug: Print all parameter values",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"CMake Download Debug Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3BucketArn: $S3BucketArn\" \"INFO\"",
                    "Write-Log \"SoftwareKey: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"SoftwareName: $SoftwareName\" \"INFO\"",
                    "Write-Log \"DownloadPath: $DownloadPath\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "# Test AWS CLI availability",
                    "Write-Log \"Testing AWS CLI...\" \"INFO\"",
                    "try {",
                    "    $awsVersion = aws --version 2>&1",
                    "    Write-Log \"AWS CLI available: $awsVersion\" \"SUCCESS\"",
                    "} catch {",
                    "    Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = aws sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid: $callerIdentity\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        Stop-Transcript",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "# Create destination directory",
                    "Write-Log \"Creating destination directory: $DownloadPath\" \"INFO\"",
                    "if (!(Test-Path $DownloadPath)) {",
                    "    New-Item -ItemType Directory -Path $DownloadPath -Force | Out-Null",
                    "    Write-Log \"Directory created successfully\" \"SUCCESS\"",
                    "} else {",
                    "    Write-Log \"Directory already exists\" \"INFO\"",
                    "}",
                    "",
                    "# Extract filename from S3 key",
                    "$FileName = Split-Path $SoftwareKey -Leaf",
                    "$FilePath = Join-Path $DownloadPath $FileName",
                    "",
                    "Write-Log \"Downloading: $SoftwareName\" \"INFO\"",
                    "Write-Log \"  S3 Key: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"  Local Path: $FilePath\" \"INFO\"",
                    "",
                    "# Download using AWS CLI",
                    "$awsCommand = \"aws s3api get-object --bucket `\"$S3BucketArn`\" --key `\"$SoftwareKey`\" `\"$FilePath`\" --region `\"$Region`\"\"",
                    "Write-Log \"Executing: $awsCommand\" \"INFO\"",
                    "",
                    "try {",
                    "    $result = Invoke-Expression $awsCommand 2>&1",
                    "    $exitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"AWS CLI exit code: $exitCode\" \"INFO\"",
                    "    Write-Log \"AWS CLI output: $result\" \"INFO\"",
                    "    ",
                    "    if ($exitCode -eq 0 -and (Test-Path $FilePath)) {",
                    "        $FileInfo = Get-Item $FilePath",
                    "        $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "        ",
                    "        Write-Log \"✅ Download completed successfully!\" \"SUCCESS\"",
                    "        Write-Log \"  File: $FilePath\" \"SUCCESS\"",
                    "        Write-Log \"  Size: $FileSizeMB MB\" \"SUCCESS\"",
                    "        Write-Log \"  Created: $($FileInfo.CreationTime)\" \"SUCCESS\"",
                    "        ",
                    "        Stop-Transcript",
                    "        exit 0",
                    "    } else {",
                    "        Write-Log \"❌ Download failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $exitCode\" \"ERROR\"",
                    "        Write-Log \"  Output: $result\" \"ERROR\"",
                    "        ",
                    "        Stop-Transcript",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Download error: $_\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}