{
    "schemaVersion": "2.2",
    "description": "Install EXE software package from local path with enhanced error handling and logging",
    "parameters": {
        "installerPath": {
            "type": "String",
            "description": "Full path to the EXE installer file",
            "allowedPattern": "^[A-Za-z]:\\\\[^<>:\"|?*]+\\.exe$"
        },
        "softwareName": {
            "type": "String",
            "description": "Name of the software being installed",
            "allowedPattern": "^[a-zA-Z0-9\\s\\-_\\.]+$"
        },
        "installArgs": {
            "type": "String",
            "description": "EXE installation arguments for silent installation",
            "default": "/S",
            "allowedPattern": "^[a-zA-Z0-9\\s/=\\-_\"'\\\\]+$"
        },
        "destinationPath": {
            "type": "String",
            "description": "Installation destination directory",
            "default": "C:\\Program Files",
            "allowedPattern": "^[A-Za-z]:\\\\[^<>:\"|?*]+$"
        },
        "installerType": {
            "type": "String",
            "description": "Type of EXE installer (NSIS, InnoSetup, InstallShield, Generic)",
            "default": "Generic",
            "allowedValues": [
                "NSIS",
                "InnoSetup",
                "InstallShield",
                "Generic"
            ]
        },
        "timeoutSeconds": {
            "type": "String",
            "description": "Installation timeout in seconds",
            "default": "900",
            "allowedPattern": "^[0-9]+$"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "installEXESoftware",
            "inputs": {
                "timeoutSeconds": "{{ timeoutSeconds }}",
                "runCommand": [
                    "# Enhanced EXE Installation Script",
                    "# Supports multiple installer types with intelligent argument handling",
                    "",
                    "param(",
                    "    [string]$InstallerPath = '{{ installerPath }}',",
                    "    [string]$SoftwareName = '{{ softwareName }}',",
                    "    [string]$InstallArgs = '{{ installArgs }}',",
                    "    [string]$DestinationPath = '{{ destinationPath }}',",
                    "    [string]$InstallerType = '{{ installerType }}'",
                    ")",
                    "",
                    "# Set error action preference",
                    "$ErrorActionPreference = 'Stop'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Force -Path $LogDir -ErrorAction SilentlyContinue | Out-Null",
                    "}",
                    "",
                    "$Timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'",
                    "$InstallLogFile = \"$LogDir\\$($SoftwareName -replace '[\\s\\W]','_')-install-$Timestamp.log\"",
                    "",
                    "# Start transcript",
                    "Start-Transcript -Path $InstallLogFile -Append",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = 'INFO')",
                    "    $LogTimestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "    $LogEntry = \"[$LogTimestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    if ($Level -eq 'ERROR') {",
                    "        Write-Host $LogEntry -ForegroundColor Red",
                    "    } elseif ($Level -eq 'WARNING') {",
                    "        Write-Host $LogEntry -ForegroundColor Yellow",
                    "    } elseif ($Level -eq 'SUCCESS') {",
                    "        Write-Host $LogEntry -ForegroundColor Green",
                    "    } else {",
                    "        Write-Host $LogEntry",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"Starting EXE installation for $SoftwareName\" \"INFO\"",
                    "Write-Log \"Installer: $InstallerPath\" \"INFO\"",
                    "Write-Log \"Arguments: $InstallArgs\" \"INFO\"",
                    "Write-Log \"Destination: $DestinationPath\" \"INFO\"",
                    "Write-Log \"Installer Type: $InstallerType\" \"INFO\"",
                    "",
                    "# Validate installer file",
                    "if (!(Test-Path $InstallerPath)) {",
                    "    Write-Log \"Installer file not found: $InstallerPath\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "try {",
                    "    $FileInfo = Get-Item $InstallerPath",
                    "    $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "    Write-Log \"Installer file size: $FileSizeMB MB\" \"INFO\"",
                    "    Write-Log \"File created: $($FileInfo.CreationTime)\" \"INFO\"",
                    "    Write-Log \"File modified: $($FileInfo.LastWriteTime)\" \"INFO\"",
                    "    ",
                    "    # Verify it's an EXE file",
                    "    if ($FileInfo.Extension -ne '.exe') {",
                    "        Write-Log \"Warning: File extension is not .exe: $($FileInfo.Extension)\" \"WARNING\"",
                    "    }",
                    "    ",
                    "    # Check digital signature",
                    "    $Signature = Get-AuthenticodeSignature $InstallerPath",
                    "    if ($Signature.Status -eq 'Valid') {",
                    "        Write-Log \"File is digitally signed by: $($Signature.SignerCertificate.Subject)\" \"INFO\"",
                    "    } elseif ($Signature.Status -eq 'NotSigned') {",
                    "        Write-Log \"Warning: File is not digitally signed\" \"WARNING\"",
                    "    } else {",
                    "        Write-Log \"Warning: File signature status: $($Signature.Status)\" \"WARNING\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Error reading file properties: $_\" \"WARNING\"",
                    "}",
                    "",
                    "# Create destination directory if needed",
                    "if (!(Test-Path $DestinationPath)) {",
                    "    try {",
                    "        New-Item -ItemType Directory -Force -Path $DestinationPath | Out-Null",
                    "        Write-Log \"Created destination directory: $DestinationPath\" \"INFO\"",
                    "    } catch {",
                    "        Write-Log \"Failed to create destination directory: $_\" \"ERROR\"",
                    "        Stop-Transcript",
                    "        exit 1",
                    "    }",
                    "}",
                    "",
                    "# Adjust arguments based on installer type",
                    "function Get-InstallerArguments {",
                    "    param(",
                    "        [string]$Type,",
                    "        [string]$BaseArgs,",
                    "        [string]$DestPath",
                    "    )",
                    "    ",
                    "    switch ($Type) {",
                    "        'NSIS' {",
                    "            # NSIS installers (e.g., NASM)",
                    "            if ($BaseArgs -notmatch '/S') {",
                    "                $BaseArgs = \"/S $BaseArgs\"",
                    "            }",
                    "            if ($DestPath -ne 'C:\\Program Files') {",
                    "                $BaseArgs += \" /D=`\"$DestPath`\"\"",
                    "            }",
                    "            return $BaseArgs",
                    "        }",
                    "        'InnoSetup' {",
                    "            # InnoSetup installers (e.g., Git for Windows)",
                    "            if ($BaseArgs -notmatch '/VERYSILENT|/SILENT') {",
                    "                $BaseArgs = \"/VERYSILENT /NORESTART $BaseArgs\"",
                    "            }",
                    "            if ($DestPath -ne 'C:\\Program Files') {",
                    "                $BaseArgs += \" /DIR=`\"$DestPath`\"\"",
                    "            }",
                    "            $BaseArgs += \" /LOG=`\"$LogDir\\$($SoftwareName -replace '[\\s\\W]','_')-setup.log`\"\"",
                    "            return $BaseArgs",
                    "        }",
                    "        'InstallShield' {",
                    "            # InstallShield installers",
                    "            if ($BaseArgs -notmatch '/s|/S') {",
                    "                $BaseArgs = \"/s /v/qn $BaseArgs\"",
                    "            }",
                    "            return $BaseArgs",
                    "        }",
                    "        default {",
                    "            # Generic or unknown installer type",
                    "            return $BaseArgs",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "# Get adjusted arguments",
                    "$FinalArgs = Get-InstallerArguments -Type $InstallerType -BaseArgs $InstallArgs -DestPath $DestinationPath",
                    "Write-Log \"Final installation arguments: $FinalArgs\" \"INFO\"",
                    "",
                    "# Build argument array",
                    "$ProcessArgs = @()",
                    "if ($FinalArgs) {",
                    "    $FinalArgs.Split(' ') | ForEach-Object {",
                    "        if ($_.Trim()) {",
                    "            $ProcessArgs += $_.Trim()",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "# Execute installation",
                    "Write-Log \"Starting installation process...\" \"INFO\"",
                    "$StartTime = Get-Date",
                    "",
                    "try {",
                    "    if ($ProcessArgs.Count -gt 0) {",
                    "        Write-Log \"Executing: $InstallerPath $($ProcessArgs -join ' ')\" \"INFO\"",
                    "        $Process = Start-Process -FilePath $InstallerPath -ArgumentList $ProcessArgs -Wait -PassThru -NoNewWindow",
                    "    } else {",
                    "        Write-Log \"Executing: $InstallerPath\" \"INFO\"",
                    "        $Process = Start-Process -FilePath $InstallerPath -Wait -PassThru -NoNewWindow",
                    "    }",
                    "    ",
                    "    $EndTime = Get-Date",
                    "    $Duration = $EndTime - $StartTime",
                    "    ",
                    "    Write-Log \"Installation completed in $([math]::Round($Duration.TotalMinutes, 2)) minutes\" \"INFO\"",
                    "    Write-Log \"Exit code: $($Process.ExitCode)\" \"INFO\"",
                    "    ",
                    "    # Interpret exit codes (common patterns)",
                    "    switch ($Process.ExitCode) {",
                    "        0 {",
                    "            Write-Log \"Installation completed successfully\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1 {",
                    "            # Could be success for some installers or generic error",
                    "            if ($InstallerType -eq 'NSIS') {",
                    "                Write-Log \"Installation completed (NSIS exit code 1)\" \"WARNING\"",
                    "                $ExitStatus = 0",
                    "            } else {",
                    "                Write-Log \"Installation may have failed (exit code 1)\" \"WARNING\"",
                    "                $ExitStatus = 0  # Treat as success unless we can verify failure",
                    "            }",
                    "        }",
                    "        2 {",
                    "            Write-Log \"Installation cancelled by user\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        3010 {",
                    "            Write-Log \"Installation completed successfully (reboot required)\" \"SUCCESS\"",
                    "            Write-Log \"A system reboot is required to complete the installation\" \"WARNING\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1602 {",
                    "            Write-Log \"Installation cancelled by user\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1603 {",
                    "            Write-Log \"Fatal error during installation\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1618 {",
                    "            Write-Log \"Another installation is already in progress\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1641 {",
                    "            Write-Log \"Installation succeeded, reboot initiated\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        -1 {",
                    "            Write-Log \"Installation failed (generic error)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        default {",
                    "            if ($Process.ExitCode -lt 0 -or $Process.ExitCode -ge 1000) {",
                    "                Write-Log \"Installation failed with exit code: $($Process.ExitCode)\" \"ERROR\"",
                    "                $ExitStatus = 1",
                    "            } else {",
                    "                Write-Log \"Installation completed with exit code: $($Process.ExitCode)\" \"WARNING\"",
                    "                $ExitStatus = 0  # Treat unknown small positive codes as potential success",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    # Verify installation",
                    "    Write-Log \"Verifying installation...\" \"INFO\"",
                    "    ",
                    "    # Check for new files in destination",
                    "    $InstalledFiles = @()",
                    "    ",
                    "    # Check primary destination",
                    "    if (Test-Path $DestinationPath) {",
                    "        $InstalledFiles += Get-ChildItem -Path $DestinationPath -ErrorAction SilentlyContinue | ",
                    "                          Where-Object { $_.LastWriteTime -gt $StartTime }",
                    "    }",
                    "    ",
                    "    # Also check common installation paths",
                    "    $CommonPaths = @(",
                    "        'C:\\Program Files',",
                    "        'C:\\Program Files (x86)',",
                    "        $env:ProgramFiles,",
                    "        ${env:ProgramFiles(x86)}",
                    "    ) | Select-Object -Unique | Where-Object { $_ -and (Test-Path $_) }",
                    "    ",
                    "    foreach ($Path in $CommonPaths) {",
                    "        if ($Path -ne $DestinationPath) {",
                    "            $NewItems = Get-ChildItem -Path $Path -ErrorAction SilentlyContinue | ",
                    "                       Where-Object { $_.LastWriteTime -gt $StartTime }",
                    "            if ($NewItems) {",
                    "                $InstalledFiles += $NewItems",
                    "                Write-Log \"Found new items in: $Path\" \"INFO\"",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    if ($InstalledFiles.Count -gt 0) {",
                    "        Write-Log \"Found $($InstalledFiles.Count) new files/folders\" \"INFO\"",
                    "        Write-Log \"Installation verified successfully\" \"SUCCESS\"",
                    "    } elseif ($Process.ExitCode -eq 0 -or $Process.ExitCode -eq 3010) {",
                    "        Write-Log \"Installation reported success but no new files detected\" \"WARNING\"",
                    "        Write-Log \"Software may have been installed to an unknown location\" \"INFO\"",
                    "    }",
                    "    ",
                    "    # Check for software-specific indicators",
                    "    $SoftwareIndicators = @{",
                    "        'Git' = 'C:\\Program Files\\Git\\bin\\git.exe'",
                    "        'CMake' = 'C:\\cmake\\bin\\cmake.exe'",
                    "        'Python' = 'C:\\Python\\python.exe'",
                    "        'NASM' = 'C:\\Program Files\\NASM\\nasm.exe'",
                    "        'Perl' = 'C:\\Strawberry\\perl\\bin\\perl.exe'",
                    "    }",
                    "    ",
                    "    foreach ($Software in $SoftwareIndicators.Keys) {",
                    "        if ($SoftwareName -like \"*$Software*\") {",
                    "            $IndicatorPath = $SoftwareIndicators[$Software]",
                    "            if (Test-Path $IndicatorPath) {",
                    "                Write-Log \"$Software executable found: $IndicatorPath\" \"SUCCESS\"",
                    "                $ExitStatus = 0",
                    "                break",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "} catch {",
                    "    Write-Log \"Installation error: $_\" \"ERROR\"",
                    "    Write-Log \"Exception details: $($_.Exception.Message)\" \"ERROR\"",
                    "    Write-Log \"Stack trace: $($_.Exception.StackTrace)\" \"ERROR\"",
                    "    $ExitStatus = 1",
                    "} finally {",
                    "    # Log final status",
                    "    Write-Log \"Installation process completed with status: $ExitStatus\" \"INFO\"",
                    "    ",
                    "    # Display log location",
                    "    Write-Log \"Installation log: $InstallLogFile\" \"INFO\"",
                    "    ",
                    "    # Check for installer-specific logs",
                    "    $SetupLogs = Get-ChildItem -Path $LogDir -Filter \"*$($SoftwareName -replace '[\\s\\W]','_')*setup*.log\" -ErrorAction SilentlyContinue",
                    "    if ($SetupLogs) {",
                    "        foreach ($Log in $SetupLogs) {",
                    "            Write-Log \"Setup log found: $($Log.FullName)\" \"INFO\"",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"$SoftwareName EXE installation script completed\" \"INFO\"",
                    "Stop-Transcript",
                    "exit $ExitStatus"
                ]
            }
        }
    ]
}