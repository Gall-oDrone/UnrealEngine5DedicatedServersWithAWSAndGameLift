{
    "schemaVersion": "2.2",
    "description": "Download multiple software installers from S3 access point to Windows instance",
    "parameters": {
        "s3BucketArn": {
            "type": "String",
            "description": "S3 access point ARN",
            "allowedPattern": "^arn:aws:s3:[a-z0-9-]+:[0-9]+:accesspoint/[a-zA-Z0-9-]+$"
        },
        "softwareKeys": {
            "type": "StringList",
            "description": "List of S3 object keys for software installers",
            "default": []
        },
        "softwareNames": {
            "type": "StringList",
            "description": "List of software names (corresponding to keys)",
            "default": []
        },
        "downloadPaths": {
            "type": "StringList",
            "description": "List of destination paths for downloads",
            "default": []
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1",
            "allowedPattern": "^[a-z0-9-]+$"
        },
        "parallelDownloads": {
            "type": "String",
            "description": "Enable parallel downloads (true/false)",
            "default": "false",
            "allowedValues": [
                "true",
                "false"
            ]
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadS3Installers",
            "inputs": {
                "timeoutSeconds": "1800",
                "runCommand": [
                    "# S3 Multi-Installer Download Script",
                    "# Downloads multiple software installers from S3 using access point",
                    "",
                    "param(",
                    "    [string]$S3BucketArn = '{{ s3BucketArn }}',",
                    "    [string[]]$SoftwareKeys = @({{ softwareKeys }}),",
                    "    [string[]]$SoftwareNames = @({{ softwareNames }}),",
                    "    [string[]]$DownloadPaths = @({{ downloadPaths }}),",
                    "    [string]$Region = '{{ region }}',",
                    "    [bool]$ParallelDownloads = [bool]::Parse('{{ parallelDownloads }}')",
                    ")",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\s3-download-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "$ProgressFile = \"$LogDir\\download-progress.txt\"",
                    "",
                    "# Start transcript for detailed logging",
                    "Start-Transcript -Path $LogFile -Append",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "function Test-AwsCli {",
                    "    try {",
                    "        $awsVersion = aws --version 2>&1",
                    "        Write-Log \"AWS CLI available: $awsVersion\" \"INFO\"",
                    "        return $true",
                    "    } catch {",
                    "        Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "        return $false",
                    "    }",
                    "}",
                    "",
                    "function Download-S3Object {",
                    "    param(",
                    "        [string]$S3Key,",
                    "        [string]$Name,",
                    "        [string]$DestinationPath",
                    "    )",
                    "    ",
                    "    Write-Log \"Starting download: $Name\" \"INFO\"",
                    "    Write-Log \"  S3 Key: $S3Key\" \"INFO\"",
                    "    Write-Log \"  Destination: $DestinationPath\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        # Extract filename from S3 key",
                    "        $FileName = Split-Path $S3Key -Leaf",
                    "        ",
                    "        # Create destination directory if it doesn't exist",
                    "        if (!(Test-Path $DestinationPath)) {",
                    "            New-Item -ItemType Directory -Path $DestinationPath -Force | Out-Null",
                    "            Write-Log \"  Created directory: $DestinationPath\" \"INFO\"",
                    "        }",
                    "        ",
                    "        # Full path for the downloaded file",
                    "        $FilePath = Join-Path $DestinationPath $FileName",
                    "        ",
                    "        # Check if file already exists",
                    "        if (Test-Path $FilePath) {",
                    "            Write-Log \"  File already exists, removing: $FilePath\" \"WARNING\"",
                    "            Remove-Item $FilePath -Force",
                    "        }",
                    "        ",
                    "        # Download using AWS CLI",
                    "        $awsCommand = \"aws s3api get-object --bucket `\"$S3BucketArn`\" --key `\"$S3Key`\" `\"$FilePath`\" --region `\"$Region`\"\"",
                    "        Write-Log \"  Executing: $awsCommand\" \"DEBUG\"",
                    "        ",
                    "        # Execute AWS CLI command",
                    "        $result = Invoke-Expression $awsCommand 2>&1",
                    "        ",
                    "        # Check if download was successful",
                    "        if ($LASTEXITCODE -eq 0 -and (Test-Path $FilePath)) {",
                    "            $FileInfo = Get-Item $FilePath",
                    "            $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "            ",
                    "            Write-Log \"  ✅ Download completed: $Name\" \"SUCCESS\"",
                    "            Write-Log \"     File: $FilePath\" \"INFO\"",
                    "            Write-Log \"     Size: $FileSizeMB MB\" \"INFO\"",
                    "            Write-Log \"     Created: $($FileInfo.CreationTime)\" \"INFO\"",
                    "            ",
                    "            # Verify file integrity",
                    "            if ($FileInfo.Length -eq 0) {",
                    "                Write-Log \"  ❌ Downloaded file is empty\" \"ERROR\"",
                    "                return @{Success=$false; Path=$null; Error=\"Empty file\"}",
                    "            }",
                    "            ",
                    "            return @{Success=$true; Path=$FilePath; Size=$FileInfo.Length}",
                    "        } else {",
                    "            Write-Log \"  ❌ Download failed: $Name\" \"ERROR\"",
                    "            Write-Log \"     Exit code: $LASTEXITCODE\" \"ERROR\"",
                    "            Write-Log \"     Output: $result\" \"ERROR\"",
                    "            return @{Success=$false; Path=$null; Error=\"Download failed\"}",
                    "        }",
                    "    } catch {",
                    "        Write-Log \"  ❌ Download error for $Name : $_\" \"ERROR\"",
                    "        return @{Success=$false; Path=$null; Error=$_.Exception.Message}",
                    "    }",
                    "}",
                    "",
                    "# Main execution",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3 Multi-Installer Download Process\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3 Bucket ARN: $S3BucketArn\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "Write-Log \"Number of files: $($SoftwareKeys.Count)\" \"INFO\"",
                    "Write-Log \"Parallel downloads: $ParallelDownloads\" \"INFO\"",
                    "",
                    "# Validate parameters",
                    "if ($SoftwareKeys.Count -eq 0) {",
                    "    Write-Log \"No software keys provided\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "if ($SoftwareKeys.Count -ne $SoftwareNames.Count) {",
                    "    Write-Log \"Mismatch: Keys count ($($SoftwareKeys.Count)) != Names count ($($SoftwareNames.Count))\" \"WARNING\"",
                    "}",
                    "",
                    "# Test AWS CLI availability",
                    "if (!(Test-AwsCli)) {",
                    "    Write-Log \"AWS CLI is required but not available\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = aws sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid\" \"INFO\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        Stop-Transcript",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}",
                    "",
                    "# Initialize counters",
                    "$SuccessCount = 0",
                    "$FailureCount = 0",
                    "$DownloadResults = @()",
                    "",
                    "# Update progress",
                    "\"STARTED: $(Get-Date)\" | Out-File -FilePath $ProgressFile -Force",
                    "",
                    "# Download each file",
                    "for ($i = 0; $i -lt $SoftwareKeys.Count; $i++) {",
                    "    $Key = $SoftwareKeys[$i]",
                    "    $Name = if ($i -lt $SoftwareNames.Count) { $SoftwareNames[$i] } else { \"Software $($i+1)\" }",
                    "    $DestPath = if ($i -lt $DownloadPaths.Count) { $DownloadPaths[$i] } else { \"C:\\downloads\" }",
                    "    ",
                    "    Write-Log \"\" \"INFO\"",
                    "    Write-Log \"Processing file $($i+1)/$($SoftwareKeys.Count): $Name\" \"INFO\"",
                    "    Write-Log \"----------------------------------------\" \"INFO\"",
                    "    ",
                    "    # Update progress file",
                    "    \"DOWNLOADING: $Name ($($i+1)/$($SoftwareKeys.Count))\" | Out-File -FilePath $ProgressFile -Force",
                    "    ",
                    "    # Download the file",
                    "    $result = Download-S3Object -S3Key $Key -Name $Name -DestinationPath $DestPath",
                    "    ",
                    "    # Store result",
                    "    $DownloadResults += @{",
                    "        Name = $Name",
                    "        Key = $Key",
                    "        Success = $result.Success",
                    "        Path = $result.Path",
                    "        Size = $result.Size",
                    "        Error = $result.Error",
                    "    }",
                    "    ",
                    "    # Update counters",
                    "    if ($result.Success) {",
                    "        $SuccessCount++",
                    "    } else {",
                    "        $FailureCount++",
                    "    }",
                    "}",
                    "",
                    "# Generate summary report",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Download Summary\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Total files: $($SoftwareKeys.Count)\" \"INFO\"",
                    "Write-Log \"Successful downloads: $SuccessCount\" \"SUCCESS\"",
                    "Write-Log \"Failed downloads: $FailureCount\" $(if ($FailureCount -gt 0) { \"ERROR\" } else { \"INFO\" })",
                    "",
                    "# List successful downloads",
                    "if ($SuccessCount -gt 0) {",
                    "    Write-Log \"\" \"INFO\"",
                    "    Write-Log \"Successfully Downloaded:\" \"SUCCESS\"",
                    "    foreach ($result in ($DownloadResults | Where-Object { $_.Success })) {",
                    "        $SizeMB = [math]::Round($result.Size / 1MB, 2)",
                    "        Write-Log \"  ✅ $($result.Name) - $($result.Path) ($SizeMB MB)\" \"SUCCESS\"",
                    "    }",
                    "}",
                    "",
                    "# List failed downloads",
                    "if ($FailureCount -gt 0) {",
                    "    Write-Log \"\" \"INFO\"",
                    "    Write-Log \"Failed Downloads:\" \"ERROR\"",
                    "    foreach ($result in ($DownloadResults | Where-Object { -not $_.Success })) {",
                    "        Write-Log \"  ❌ $($result.Name) - $($result.Error)\" \"ERROR\"",
                    "    }",
                    "}",
                    "",
                    "# Save download manifest",
                    "$ManifestFile = \"$LogDir\\download-manifest-$(Get-Date -Format 'yyyyMMdd-HHmmss').json\"",
                    "$DownloadResults | ConvertTo-Json -Depth 3 | Out-File -FilePath $ManifestFile -Force",
                    "Write-Log \"Download manifest saved: $ManifestFile\" \"INFO\"",
                    "",
                    "# Update progress file",
                    "if ($FailureCount -eq 0) {",
                    "    \"COMPLETED: All downloads successful!\" | Out-File -FilePath $ProgressFile -Force",
                    "    Write-Log \"All downloads completed successfully!\" \"SUCCESS\"",
                    "    Stop-Transcript",
                    "    exit 0",
                    "} else {",
                    "    \"COMPLETED_WITH_ERRORS: $FailureCount downloads failed\" | Out-File -FilePath $ProgressFile -Force",
                    "    Write-Log \"Some downloads failed\" \"ERROR\"",
                    "    Stop-Transcript",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}