{
    "schemaVersion": "2.2",
    "description": "Debug: Download and Install Visual Studio 2022 Community Edition from S3 access point",
    "parameters": {
        "s3BucketArn": {
            "type": "String",
            "description": "S3 access point ARN",
            "allowedPattern": "^arn:aws:s3:[a-z0-9-]+:[0-9]+:accesspoint/[a-zA-Z0-9-]+$"
        },
        "softwareKey": {
            "type": "String",
            "description": "S3 object key for Visual Studio 2022 installer"
        },
        "softwareName": {
            "type": "String",
            "description": "Software name (Visual Studio 2022 Community)"
        },
        "downloadPath": {
            "type": "String",
            "description": "Destination path for download"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadVisualStudio2022",
            "inputs": {
                "timeoutSeconds": "3600",
                "runCommand": [
                    "# Debug: Visual Studio 2022 Download and Install Script",
                    "",
                    "# Get parameters from SSM",
                    "$S3BucketArn = '{{ s3BucketArn }}'",
                    "$SoftwareKey = '{{ softwareKey }}'",
                    "$SoftwareName = '{{ softwareName }}'",
                    "$DownloadPath = '{{ downloadPath }}'",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\visual-studio-2022-download-install-debug-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Debug: Print all parameter values",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Visual Studio 2022 Download and Install Debug Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3BucketArn: $S3BucketArn\" \"INFO\"",
                    "Write-Log \"SoftwareKey: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"SoftwareName: $SoftwareName\" \"INFO\"",
                    "Write-Log \"DownloadPath: $DownloadPath\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "# Test AWS CLI availability",
                    "Write-Log \"Testing AWS CLI...\" \"INFO\"",
                    "try {",
                    "    $awsVersion = & \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" --version 2>&1",
                    "    Write-Log \"AWS CLI available: $awsVersion\" \"SUCCESS\"",
                    "} catch {",
                    "    Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = & \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid: $callerIdentity\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Create destination directory",
                    "Write-Log \"Creating destination directory: $DownloadPath\" \"INFO\"",
                    "if (!(Test-Path $DownloadPath)) {",
                    "    New-Item -ItemType Directory -Path $DownloadPath -Force | Out-Null",
                    "    Write-Log \"Directory created successfully\" \"SUCCESS\"",
                    "} else {",
                    "    Write-Log \"Directory already exists\" \"INFO\"",
                    "}",
                    "",
                    "# Extract filename from S3 key",
                    "$FileName = Split-Path $SoftwareKey -Leaf",
                    "$FilePath = Join-Path $DownloadPath $FileName",
                    "",
                    "Write-Log \"Downloading: $SoftwareName\" \"INFO\"",
                    "Write-Log \"  S3 Key: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"  Local Path: $FilePath\" \"INFO\"",
                    "",
                    "# Download using AWS CLI",
                    "$awsExe = \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\"",
                    "$awsArgs = @(\"s3api\", \"get-object\", \"--bucket\", $S3BucketArn, \"--key\", $SoftwareKey, $FilePath, \"--region\", $Region)",
                    "$awsCommand = \"$awsExe s3api get-object --bucket $S3BucketArn --key $SoftwareKey $FilePath --region $Region\"",
                    "Write-Log \"Executing: $awsCommand\" \"INFO\"",
                    "",
                    "try {",
                    "    $result = & $awsExe $awsArgs 2>&1",
                    "    $exitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"AWS CLI exit code: $exitCode\" \"INFO\"",
                    "    Write-Log \"AWS CLI output: $result\" \"INFO\"",
                    "    ",
                    "    if ($exitCode -eq 0 -and (Test-Path $FilePath)) {",
                    "        $FileInfo = Get-Item $FilePath",
                    "        $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "        ",
                    "        Write-Log \"✅ Download completed successfully!\" \"SUCCESS\"",
                    "        Write-Log \"  File: $FilePath\" \"SUCCESS\"",
                    "        Write-Log \"  Size: $FileSizeMB MB\" \"SUCCESS\"",
                    "        Write-Log \"  Created: $($FileInfo.CreationTime)\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ Download failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $exitCode\" \"ERROR\"",
                    "        Write-Log \"  Output: $result\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Download error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Install Visual Studio 2022",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Starting Visual Studio 2022 Installation\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Check if Visual Studio 2022 is already installed",
                    "Write-Log \"Checking if Visual Studio 2022 is already installed...\" \"INFO\"",
                    "try {",
                    "    # Check for Visual Studio 2022 in registry",
                    "    $vsPath = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe\"",
                    "    if (Test-Path $vsPath) {",
                    "        Write-Log \"Visual Studio 2022 Community is already installed at: $vsPath\" \"WARNING\"",
                    "        Write-Log \"Skipping installation\" \"INFO\"",
                    "        exit 0",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Visual Studio 2022 not found, proceeding with installation\" \"INFO\"",
                    "}",
                    "",
                    "# Install Visual Studio 2022 silently",
                    "Write-Log \"Installing Visual Studio 2022 from: $FilePath\" \"INFO\"",
                    "try {",
                    "    # Visual Studio installer uses --quiet --wait --norestart flags",
                    "    # Also specify workload for C++ development",
                    "    $installArgs = @(\"--quiet\", \"--wait\", \"--norestart\", \"--add\", \"Microsoft.VisualStudio.Workload.NativeDesktop\", \"--add\", \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\", \"--add\", \"Microsoft.VisualStudio.Component.Windows10SDK.19041\")",
                    "    $installCommand = \"$FilePath --quiet --wait --norestart --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041\"",
                    "    Write-Log \"Executing: $installCommand\" \"INFO\"",
                    "    ",
                    "    # Set up installation log",
                    "    $installLogPath = \"$LogDir\\visual-studio-2022-install.log\"",
                    "    ",
                    "    # Start installation process",
                    "    Write-Log \"Starting Visual Studio 2022 installation (this may take 30-60 minutes)...\" \"INFO\"",
                    "    $installProcess = Start-Process -FilePath $FilePath -ArgumentList $installArgs -PassThru -RedirectStandardOutput $installLogPath -RedirectStandardError \"$LogDir\\visual-studio-2022-install-error.log\" -Wait",
                    "    $installExitCode = $installProcess.ExitCode",
                    "    ",
                    "    Write-Log \"Installation exit code: $installExitCode\" \"INFO\"",
                    "    ",
                    "    # Check installation log",
                    "    if (Test-Path $installLogPath) {",
                    "        $logContent = Get-Content $installLogPath -Tail 20 -ErrorAction SilentlyContinue",
                    "        if ($logContent) {",
                    "            Write-Log \"Last 20 lines of installation log:\" \"INFO\"",
                    "            $logContent | ForEach-Object { Write-Log \"  $_\" \"INFO\" }",
                    "        }",
                    "    }",
                    "    ",
                    "    if ($installExitCode -eq 0) {",
                    "        Write-Log \"✅ Visual Studio 2022 installation completed successfully!\" \"SUCCESS\"",
                    "        ",
                    "        # Wait a moment for installation to complete",
                    "        Start-Sleep -Seconds 10",
                    "        ",
                    "        # Verify installation",
                    "        Write-Log \"Verifying Visual Studio 2022 installation...\" \"INFO\"",
                    "        try {",
                    "            # Check for Visual Studio 2022 executable",
                    "            $vsPath = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe\"",
                    "            if (Test-Path $vsPath) {",
                    "                Write-Log \"✅ Visual Studio 2022 verification successful\" \"SUCCESS\"",
                    "                Write-Log \"Visual Studio 2022 installed at: $vsPath\" \"SUCCESS\"",
                    "                ",
                    "                # Try to get version information",
                    "                try {",
                    "                    $versionInfo = & $vsPath /? 2>&1 | Select-String \"Version\" | Select-Object -First 1",
                    "                    if ($versionInfo) {",
                    "                        Write-Log \"Visual Studio 2022 version info: $versionInfo\" \"SUCCESS\"",
                    "                    }",
                    "                } catch {",
                    "                    Write-Log \"Could not get version info, but installation appears successful\" \"INFO\"",
                    "                }",
                    "                ",
                    "                # Check for MSBuild",
                    "                $msbuildPath = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\"",
                    "                if (Test-Path $msbuildPath) {",
                    "                    Write-Log \"MSBuild available at: $msbuildPath\" \"SUCCESS\"",
                    "                }",
                    "                ",
                    "                Write-Log \"✅ Visual Studio 2022 download and installation completed successfully!\" \"SUCCESS\"",
                    "                ",
                    "                # Verify and set PATH environment variables",
                    "                Write-Log \"\" \"INFO\"",
                    "                Write-Log \"========================================\" \"INFO\"",
                    "                Write-Log \"Verifying Visual Studio 2022 PATH Environment Variables\" \"INFO\"",
                    "                Write-Log \"========================================\" \"INFO\"",
                    "                ",
                    "                $vsMsbuildPath = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\"",
                    "                $vsVcToolsPath = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\"",
                    "                $currentPath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")",
                    "                $pathUpdated = $false",
                    "                ",
                    "                # Check and add MSBuild path",
                    "                if ($currentPath -like \"*$vsMsbuildPath*\") {",
                    "                    Write-Log \"✅ Visual Studio MSBuild PATH already configured in system environment\" \"SUCCESS\"",
                    "                } else {",
                    "                    Write-Log \"⚠️  Visual Studio MSBuild PATH not found in system environment\" \"WARNING\"",
                    "                    Write-Log \"Adding Visual Studio MSBuild to system PATH...\" \"INFO\"",
                    "                    ",
                    "                    try {",
                    "                        $newPath = if ($currentPath.EndsWith(\";\")) { \"$currentPath$vsMsbuildPath\" } else { \"$currentPath;$vsMsbuildPath\" }",
                    "                        [System.Environment]::SetEnvironmentVariable(\"Path\", $newPath, \"Machine\")",
                    "                        Write-Log \"✅ Visual Studio MSBuild PATH added to system environment successfully\" \"SUCCESS\"",
                    "                        $pathUpdated = $true",
                    "                    } catch {",
                    "                        Write-Log \"❌ Failed to add Visual Studio MSBuild to system PATH: $_\" \"ERROR\"",
                    "                    }",
                    "                }",
                    "                ",
                    "                # Check and add VC Tools path (find the actual version directory)",
                    "                if (Test-Path $vsVcToolsPath) {",
                    "                    $vcVersionDirs = Get-ChildItem -Path $vsVcToolsPath -Directory | Sort-Object Name -Descending",
                    "                    if ($vcVersionDirs.Count -gt 0) {",
                    "                        $latestVcVersion = $vcVersionDirs[0].Name",
                    "                        $vsVcBinPath = \"$vsVcToolsPath\\$latestVcVersion\\bin\\Hostx64\\x64\"",
                    "                        ",
                    "                        if ($currentPath -like \"*$vsVcBinPath*\") {",
                    "                            Write-Log \"✅ Visual Studio VC Tools PATH already configured in system environment\" \"SUCCESS\"",
                    "                        } else {",
                    "                            Write-Log \"⚠️  Visual Studio VC Tools PATH not found in system environment\" \"WARNING\"",
                    "                            Write-Log \"Adding Visual Studio VC Tools to system PATH...\" \"INFO\"",
                    "                            ",
                    "                            try {",
                    "                                $currentPath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")",
                    "                                $newPath = if ($currentPath.EndsWith(\";\")) { \"$currentPath$vsVcBinPath\" } else { \"$currentPath;$vsVcBinPath\" }",
                    "                                [System.Environment]::SetEnvironmentVariable(\"Path\", $newPath, \"Machine\")",
                    "                                Write-Log \"✅ Visual Studio VC Tools PATH added to system environment successfully\" \"SUCCESS\"",
                    "                                Write-Log \"VC Tools version: $latestVcVersion\" \"INFO\"",
                    "                                $pathUpdated = $true",
                    "                            } catch {",
                    "                                Write-Log \"❌ Failed to add Visual Studio VC Tools to system PATH: $_\" \"ERROR\"",
                    "                            }",
                    "                        }",
                    "                    } else {",
                    "                        Write-Log \"⚠️  No VC Tools version directories found\" \"WARNING\"",
                    "                    }",
                    "                } else {",
                    "                    Write-Log \"⚠️  Visual Studio VC Tools directory not found\" \"WARNING\"",
                    "                }",
                    "                ",
                    "                if ($pathUpdated) {",
                    "                    Write-Log \"Note: PATH changes will take effect after system restart or new session\" \"INFO\"",
                    "                }",
                    "                ",
                    "                exit 0",
                    "            } else {",
                    "                Write-Log \"⚠️  Visual Studio 2022 installed but executable not found at expected location\" \"WARNING\"",
                    "                Write-Log \"Installation may have succeeded but executable is in a different location\" \"WARNING\"",
                    "                exit 0",
                    "            }",
                    "        } catch {",
                    "            Write-Log \"⚠️  Could not verify Visual Studio 2022 installation: $_\" \"WARNING\"",
                    "            Write-Log \"Installation may have succeeded but verification failed\" \"WARNING\"",
                    "            exit 0",
                    "        }",
                    "    } else {",
                    "        Write-Log \"❌ Visual Studio 2022 installation failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $installExitCode\" \"ERROR\"",
                    "        ",
                    "        # Check error log if available",
                    "        $errorLogPath = \"$LogDir\\visual-studio-2022-install-error.log\"",
                    "        if (Test-Path $errorLogPath) {",
                    "            Write-Log \"Error log available at: $errorLogPath\" \"INFO\"",
                    "            $errorContent = Get-Content $errorLogPath -Tail 10 -ErrorAction SilentlyContinue",
                    "            if ($errorContent) {",
                    "                Write-Log \"Last 10 lines of error log:\" \"INFO\"",
                    "                $errorContent | ForEach-Object { Write-Log \"  $_\" \"ERROR\" }",
                    "            }",
                    "        }",
                    "        ",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Visual Studio 2022 installation error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}