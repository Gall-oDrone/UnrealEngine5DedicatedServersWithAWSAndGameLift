{
    "schemaVersion": "2.2",
    "description": "Debug: Download multiple installers from S3 access point",
    "parameters": {
        "s3BucketArn": {
            "type": "String",
            "description": "S3 access point ARN",
            "allowedPattern": "^arn:aws:s3:[a-z0-9-]+:[0-9]+:accesspoint/[a-zA-Z0-9-]+$"
        },
        "softwareKeys": {
            "type": "StringList",
            "description": "List of S3 object keys for software installers"
        },
        "softwareNames": {
            "type": "StringList",
            "description": "List of software names (corresponding to keys)"
        },
        "downloadPaths": {
            "type": "StringList",
            "description": "List of destination paths for downloads"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadInstallers",
            "inputs": {
                "timeoutSeconds": "1800",
                "runCommand": [
                    "# Debug: Multi-Installer Download Script",
                    "",
                    "# Get parameters from SSM",
                    "$S3BucketArn = '{{ s3BucketArn }}'",
                    "$SoftwareKeys = ({{ ssm:parameter \"softwareKeys\" type=\"StringList\" | toJson }}) | ConvertFrom-Json",
                    "$SoftwareNames = ({{ ssm:parameter \"softwareNames\" type=\"StringList\" | toJson }}) | ConvertFrom-Json",
                    "$DownloadPaths = ({{ ssm:parameter \"downloadPaths\" type=\"StringList\" | toJson }}) | ConvertFrom-Json",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\\\multi-download-debug-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Debug: Print all parameter values",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Multi-Installer Download Debug Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3BucketArn: $S3BucketArn\" \"INFO\"",
                    "Write-Log \"SoftwareKeys count: $($SoftwareKeys.Count)\" \"INFO\"",
                    "Write-Log \"SoftwareNames count: $($SoftwareNames.Count)\" \"INFO\"",
                    "Write-Log \"DownloadPaths count: $($DownloadPaths.Count)\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "# Test AWS CLI availability",
                    "Write-Log \"Testing AWS CLI...\" \"INFO\"",
                    "try {",
                    "    $awsVersion = & \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\" --version 2>&1",
                    "    Write-Log \"AWS CLI available: $awsVersion\" \"SUCCESS\"",
                    "} catch {",
                    "    Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = & \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\" sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid: $callerIdentity\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Initialize counters",
                    "$SuccessCount = 0",
                    "$FailureCount = 0",
                    "",
                    "# Download each file",
                    "for ($i = 0; $i -lt $SoftwareKeys.Count; $i++) {",
                    "    $Key = $SoftwareKeys[$i]",
                    "    $Name = if ($i -lt $SoftwareNames.Count) { $SoftwareNames[$i] } else { \"Software $($i+1)\" }",
                    "    $DestPath = if ($i -lt $DownloadPaths.Count) { $DownloadPaths[$i] } else { \"C:\\\\downloads\" }",
                    "    ",
                    "    Write-Log \"\" \"INFO\"",
                    "    Write-Log \"Processing file $($i+1)/$($SoftwareKeys.Count): $Name\" \"INFO\"",
                    "    Write-Log \"----------------------------------------\" \"INFO\"",
                    "    ",
                    "    # Create destination directory",
                    "    Write-Log \"Creating destination directory: $DestPath\" \"INFO\"",
                    "    if (!(Test-Path $DestPath)) {",
                    "        New-Item -ItemType Directory -Path $DestPath -Force | Out-Null",
                    "        Write-Log \"Directory created successfully\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"Directory already exists\" \"INFO\"",
                    "    }",
                    "    ",
                    "    # Extract filename from S3 key",
                    "    $FileName = Split-Path $Key -Leaf",
                    "    $FilePath = Join-Path $DestPath $FileName",
                    "    ",
                    "    Write-Log \"Downloading: $Name\" \"INFO\"",
                    "    Write-Log \"  S3 Key: $Key\" \"INFO\"",
                    "    Write-Log \"  Local Path: $FilePath\" \"INFO\"",
                    "    ",
                    "    # Download using AWS CLI",
                    "    $awsExe = \"C:\\\\Program Files\\\\Amazon\\\\AWSCLIV2\\\\aws.exe\"",
                    "    $awsArgs = @(\"s3api\", \"get-object\", \"--bucket\", $S3BucketArn, \"--key\", $Key, $FilePath, \"--region\", $Region)",
                    "    $awsCommand = \"$awsExe s3api get-object --bucket $S3BucketArn --key $Key $FilePath --region $Region\"",
                    "    Write-Log \"Executing: $awsCommand\" \"INFO\"",
                    "    ",
                    "    try {",
                    "        $result = & $awsExe $awsArgs 2>&1",
                    "        $exitCode = $LASTEXITCODE",
                    "        ",
                    "        Write-Log \"AWS CLI exit code: $exitCode\" \"INFO\"",
                    "        Write-Log \"AWS CLI output: $result\" \"INFO\"",
                    "        ",
                    "        if ($exitCode -eq 0 -and (Test-Path $FilePath)) {",
                    "            $FileInfo = Get-Item $FilePath",
                    "            $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "            ",
                    "            Write-Log \"✅ Download completed successfully!\" \"SUCCESS\"",
                    "            Write-Log \"  File: $FilePath\" \"SUCCESS\"",
                    "            Write-Log \"  Size: $FileSizeMB MB\" \"SUCCESS\"",
                    "            Write-Log \"  Created: $($FileInfo.CreationTime)\" \"SUCCESS\"",
                    "            ",
                    "            $SuccessCount++",
                    "        } else {",
                    "            Write-Log \"❌ Download failed\" \"ERROR\"",
                    "            Write-Log \"  Exit code: $exitCode\" \"ERROR\"",
                    "            Write-Log \"  Output: $result\" \"ERROR\"",
                    "            ",
                    "            $FailureCount++",
                    "        }",
                    "    } catch {",
                    "        Write-Log \"❌ Download error: $_\" \"ERROR\"",
                    "        $FailureCount++",
                    "    }",
                    "}",
                    "",
                    "# Generate summary",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Download Summary\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Total files: $($SoftwareKeys.Count)\" \"INFO\"",
                    "Write-Log \"Successful downloads: $SuccessCount\" \"SUCCESS\"",
                    "Write-Log \"Failed downloads: $FailureCount\" $(if ($FailureCount -gt 0) { \"ERROR\" } else { \"INFO\" })",
                    "",
                    "if ($FailureCount -eq 0) {",
                    "    Write-Log \"All downloads completed successfully!\" \"SUCCESS\"",
                    "    exit 0",
                    "} else {",
                    "    Write-Log \"Some downloads failed\" \"ERROR\"",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}