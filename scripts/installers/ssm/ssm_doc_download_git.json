{
    "schemaVersion": "2.2",
    "description": "Debug: Download and Install Git from S3 access point",
    "parameters": {
        "s3BucketArn": {
            "type": "String",
            "description": "S3 access point ARN",
            "allowedPattern": "^arn:aws:s3:[a-z0-9-]+:[0-9]+:accesspoint/[a-zA-Z0-9-]+$"
        },
        "softwareKey": {
            "type": "String",
            "description": "S3 object key for Git installer"
        },
        "softwareName": {
            "type": "String",
            "description": "Software name (Git)"
        },
        "downloadPath": {
            "type": "String",
            "description": "Destination path for download"
        },
        "region": {
            "type": "String",
            "description": "AWS region",
            "default": "us-east-1"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadGit",
            "inputs": {
                "timeoutSeconds": "1800",
                "runCommand": [
                    "# Debug: Git Download and Install Script",
                    "",
                    "# Get parameters from SSM",
                    "$S3BucketArn = '{{ s3BucketArn }}'",
                    "$SoftwareKey = '{{ softwareKey }}'",
                    "$SoftwareName = '{{ softwareName }}'",
                    "$DownloadPath = '{{ downloadPath }}'",
                    "$Region = '{{ region }}'",
                    "",
                    "# Set up logging",
                    "$LogDir = \"C:\\logs\"",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\git-download-install-debug-$(Get-Date -Format 'yyyyMMdd-HHmmss').log\"",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = \"INFO\")",
                    "    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"",
                    "    $LogEntry = \"[$Timestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "# Debug: Print all parameter values",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Git Download and Install Debug Session\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"S3BucketArn: $S3BucketArn\" \"INFO\"",
                    "Write-Log \"SoftwareKey: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"SoftwareName: $SoftwareName\" \"INFO\"",
                    "Write-Log \"DownloadPath: $DownloadPath\" \"INFO\"",
                    "Write-Log \"Region: $Region\" \"INFO\"",
                    "",
                    "# Test AWS CLI availability",
                    "Write-Log \"Testing AWS CLI...\" \"INFO\"",
                    "try {",
                    "    $awsVersion = & \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" --version 2>&1",
                    "    Write-Log \"AWS CLI available: $awsVersion\" \"SUCCESS\"",
                    "} catch {",
                    "    Write-Log \"AWS CLI not available: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Test AWS credentials",
                    "Write-Log \"Testing AWS credentials...\" \"INFO\"",
                    "try {",
                    "    $callerIdentity = & \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" sts get-caller-identity --region $Region 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"AWS credentials valid: $callerIdentity\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"AWS credentials invalid: $callerIdentity\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to verify AWS credentials: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Create destination directory",
                    "Write-Log \"Creating destination directory: $DownloadPath\" \"INFO\"",
                    "if (!(Test-Path $DownloadPath)) {",
                    "    New-Item -ItemType Directory -Path $DownloadPath -Force | Out-Null",
                    "    Write-Log \"Directory created successfully\" \"SUCCESS\"",
                    "} else {",
                    "    Write-Log \"Directory already exists\" \"INFO\"",
                    "}",
                    "",
                    "# Extract filename from S3 key",
                    "$FileName = Split-Path $SoftwareKey -Leaf",
                    "$FilePath = Join-Path $DownloadPath $FileName",
                    "",
                    "Write-Log \"Downloading: $SoftwareName\" \"INFO\"",
                    "Write-Log \"  S3 Key: $SoftwareKey\" \"INFO\"",
                    "Write-Log \"  Local Path: $FilePath\" \"INFO\"",
                    "",
                    "# Download using AWS CLI",
                    "$awsExe = \"C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\"",
                    "$awsArgs = @(\"s3api\", \"get-object\", \"--bucket\", $S3BucketArn, \"--key\", $SoftwareKey, $FilePath, \"--region\", $Region)",
                    "$awsCommand = \"$awsExe s3api get-object --bucket $S3BucketArn --key $SoftwareKey $FilePath --region $Region\"",
                    "Write-Log \"Executing: $awsCommand\" \"INFO\"",
                    "",
                    "try {",
                    "    $result = & $awsExe $awsArgs 2>&1",
                    "    $exitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"AWS CLI exit code: $exitCode\" \"INFO\"",
                    "    Write-Log \"AWS CLI output: $result\" \"INFO\"",
                    "    ",
                    "    if ($exitCode -eq 0 -and (Test-Path $FilePath)) {",
                    "        $FileInfo = Get-Item $FilePath",
                    "        $FileSizeMB = [math]::Round($FileInfo.Length / 1MB, 2)",
                    "        ",
                    "        Write-Log \"✅ Download completed successfully!\" \"SUCCESS\"",
                    "        Write-Log \"  File: $FilePath\" \"SUCCESS\"",
                    "        Write-Log \"  Size: $FileSizeMB MB\" \"SUCCESS\"",
                    "        Write-Log \"  Created: $($FileInfo.CreationTime)\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"❌ Download failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $exitCode\" \"ERROR\"",
                    "        Write-Log \"  Output: $result\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Download error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Install Git",
                    "Write-Log \"\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "Write-Log \"Starting Git Installation\" \"INFO\"",
                    "Write-Log \"========================================\" \"INFO\"",
                    "",
                    "# Check if Git is already installed",
                    "Write-Log \"Checking if Git is already installed...\" \"INFO\"",
                    "try {",
                    "    $gitVersion = & git --version 2>&1",
                    "    if ($LASTEXITCODE -eq 0) {",
                    "        Write-Log \"Git is already installed: $gitVersion\" \"WARNING\"",
                    "        Write-Log \"Skipping installation\" \"INFO\"",
                    "        exit 0",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Git not found, proceeding with installation\" \"INFO\"",
                    "}",
                    "",
                    "# Install Git silently",
                    "Write-Log \"Installing Git from: $FilePath\" \"INFO\"",
                    "try {",
                    "    # Git installer uses /SILENT flag for silent installation",
                    "    $installArgs = @(\"/SILENT\", \"/NORESTART\")",
                    "    $installCommand = \"$FilePath /SILENT /NORESTART\"",
                    "    Write-Log \"Executing: $installCommand\" \"INFO\"",
                    "    ",
                    "    $installResult = & $FilePath $installArgs 2>&1",
                    "    $installExitCode = $LASTEXITCODE",
                    "    ",
                    "    Write-Log \"Installation exit code: $installExitCode\" \"INFO\"",
                    "    Write-Log \"Installation output: $installResult\" \"INFO\"",
                    "    ",
                    "    if ($installExitCode -eq 0) {",
                    "        Write-Log \"✅ Git installation completed successfully!\" \"SUCCESS\"",
                    "        ",
                    "        # Wait a moment for installation to complete",
                    "        Start-Sleep -Seconds 10",
                    "        ",
                    "        # Verify installation",
                    "        Write-Log \"Verifying Git installation...\" \"INFO\"",
                    "        try {",
                    "            # Refresh environment variables",
                    "            $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")",
                    "            ",
                    "            $gitVersion = & git --version 2>&1",
                    "            if ($LASTEXITCODE -eq 0) {",
                    "                Write-Log \"✅ Git verification successful: $gitVersion\" \"SUCCESS\"",
                    "                ",
                    "                # Get Git path",
                    "                $gitPath = (Get-Command git -ErrorAction SilentlyContinue).Source",
                    "                if ($gitPath) {",
                    "                    Write-Log \"Git installed at: $gitPath\" \"SUCCESS\"",
                    "                }",
                    "                ",
                    "                Write-Log \"✅ Git download and installation completed successfully!\" \"SUCCESS\"",
                    "                ",
                    "                # Verify and set PATH environment variables",
                    "                Write-Log \"\" \"INFO\"",
                    "                Write-Log \"========================================\" \"INFO\"",
                    "                Write-Log \"Verifying Git PATH Environment Variables\" \"INFO\"",
                    "                Write-Log \"========================================\" \"INFO\"",
                    "                ",
                    "                $gitCmdPath = \"C:\\Program Files\\Git\\cmd\"",
                    "                $gitBinPath = \"C:\\Program Files\\Git\\mingw64\\bin\"",
                    "                $currentPath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")",
                    "                $pathUpdated = $false",
                    "                ",
                    "                # Check and add Git cmd path",
                    "                if ($currentPath -like \"*$gitCmdPath*\") {",
                    "                    Write-Log \"✅ Git cmd PATH already configured in system environment\" \"SUCCESS\"",
                    "                } else {",
                    "                    Write-Log \"⚠️  Git cmd PATH not found in system environment\" \"WARNING\"",
                    "                    Write-Log \"Adding Git cmd to system PATH...\" \"INFO\"",
                    "                    ",
                    "                    try {",
                    "                        $newPath = if ($currentPath.EndsWith(\";\")) { \"$currentPath$gitCmdPath\" } else { \"$currentPath;$gitCmdPath\" }",
                    "                        [System.Environment]::SetEnvironmentVariable(\"Path\", $newPath, \"Machine\")",
                    "                        Write-Log \"✅ Git cmd PATH added to system environment successfully\" \"SUCCESS\"",
                    "                        $pathUpdated = $true",
                    "                    } catch {",
                    "                        Write-Log \"❌ Failed to add Git cmd to system PATH: $_\" \"ERROR\"",
                    "                    }",
                    "                }",
                    "                ",
                    "                # Check and add Git mingw64 bin path",
                    "                if ($currentPath -like \"*$gitBinPath*\") {",
                    "                    Write-Log \"✅ Git mingw64 bin PATH already configured in system environment\" \"SUCCESS\"",
                    "                } else {",
                    "                    Write-Log \"⚠️  Git mingw64 bin PATH not found in system environment\" \"WARNING\"",
                    "                    Write-Log \"Adding Git mingw64 bin to system PATH...\" \"INFO\"",
                    "                    ",
                    "                    try {",
                    "                        $currentPath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")",
                    "                        $newPath = if ($currentPath.EndsWith(\";\")) { \"$currentPath$gitBinPath\" } else { \"$currentPath;$gitBinPath\" }",
                    "                        [System.Environment]::SetEnvironmentVariable(\"Path\", $newPath, \"Machine\")",
                    "                        Write-Log \"✅ Git mingw64 bin PATH added to system environment successfully\" \"SUCCESS\"",
                    "                        $pathUpdated = $true",
                    "                    } catch {",
                    "                        Write-Log \"❌ Failed to add Git mingw64 bin to system PATH: $_\" \"ERROR\"",
                    "                    }",
                    "                }",
                    "                ",
                    "                if ($pathUpdated) {",
                    "                    Write-Log \"Note: PATH changes will take effect after system restart or new session\" \"INFO\"",
                    "                }",
                    "                ",
                    "                exit 0",
                    "            } else {",
                    "                Write-Log \"⚠️  Git installed but not found in PATH\" \"WARNING\"",
                    "                Write-Log \"You may need to restart the session or add Git to PATH manually\" \"WARNING\"",
                    "                exit 0",
                    "            }",
                    "        } catch {",
                    "            Write-Log \"⚠️  Could not verify Git installation: $_\" \"WARNING\"",
                    "            Write-Log \"Installation may have succeeded but Git is not in PATH\" \"WARNING\"",
                    "            exit 0",
                    "        }",
                    "    } else {",
                    "        Write-Log \"❌ Git installation failed\" \"ERROR\"",
                    "        Write-Log \"  Exit code: $installExitCode\" \"ERROR\"",
                    "        Write-Log \"  Output: $installResult\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"❌ Git installation error: $_\" \"ERROR\"",
                    "    exit 1",
                    "}"
                ]
            }
        }
    ]
}