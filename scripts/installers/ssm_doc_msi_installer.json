{
    "schemaVersion": "2.2",
    "description": "Download and install MSI packages from S3 bucket",
    "parameters": {
        "bucketName": {
            "type": "String",
            "description": "S3 bucket name containing the MSI installer",
            "allowedPattern": "^[a-zA-Z0-9.-]+$"
        },
        "objectKey": {
            "type": "String",
            "description": "S3 object key (path) to the MSI installer",
            "allowedPattern": "^[a-zA-Z0-9!_.*'()/\\-]+$"
        },
        "installArgs": {
            "type": "String",
            "description": "MSI installation arguments for silent installation",
            "default": "/quiet /norestart",
            "allowedPattern": "^[a-zA-Z0-9\\s/=\\-_\"']+$"
        },
        "timeoutSeconds": {
            "type": "String",
            "description": "Installation timeout in seconds",
            "default": "1800",
            "allowedPattern": "^[0-9]+$"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runPowerShellScript",
            "name": "downloadAndInstallMSI",
            "inputs": {
                "timeoutSeconds": "{{ timeoutSeconds }}",
                "runCommand": [
                    "# MSI Installer Deployment Script",
                    "param(",
                    "    [string]$BucketName = '{{ bucketName }}',",
                    "    [string]$ObjectKey = '{{ objectKey }}',",
                    "    [string]$InstallArgs = '{{ installArgs }}'",
                    ")",
                    "",
                    "# Set up logging",
                    "$LogDir = 'C:\\logs'",
                    "if (!(Test-Path $LogDir)) {",
                    "    New-Item -ItemType Directory -Path $LogDir -Force | Out-Null",
                    "}",
                    "",
                    "$LogFile = \"$LogDir\\msi-installer.log\"",
                    "$Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "",
                    "function Write-Log {",
                    "    param([string]$Message, [string]$Level = 'INFO')",
                    "    $LogTimestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
                    "    $LogEntry = \"[$LogTimestamp] [$Level] $Message\"",
                    "    Write-Host $LogEntry",
                    "    Add-Content -Path $LogFile -Value $LogEntry",
                    "}",
                    "",
                    "Write-Log \"Starting MSI installation process\" \"INFO\"",
                    "Write-Log \"Bucket: $BucketName\" \"INFO\"",
                    "Write-Log \"Object Key: $ObjectKey\" \"INFO\"",
                    "Write-Log \"Install Args: $InstallArgs\" \"INFO\"",
                    "",
                    "# Extract filename from S3 key",
                    "$FileName = Split-Path $ObjectKey -Leaf",
                    "$TempDir = 'C:\\temp'",
                    "$LocalPath = \"$TempDir\\$FileName\"",
                    "",
                    "# Create temp directory",
                    "try {",
                    "    if (!(Test-Path $TempDir)) {",
                    "        New-Item -ItemType Directory -Path $TempDir -Force | Out-Null",
                    "        Write-Log \"Created temp directory: $TempDir\" \"INFO\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to create temp directory: $($_.Exception.Message)\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Download from S3",
                    "Write-Log \"Downloading installer from S3...\" \"INFO\"",
                    "try {",
                    "    Copy-S3Object -BucketName $BucketName -Key $ObjectKey -LocalFile $LocalPath -Force",
                    "    ",
                    "    if (Test-Path $LocalPath) {",
                    "        $FileSize = [math]::Round((Get-Item $LocalPath).Length / 1MB, 2)",
                    "        Write-Log \"Downloaded successfully: $LocalPath ($FileSize MB)\" \"SUCCESS\"",
                    "    } else {",
                    "        Write-Log \"Downloaded file not found: $LocalPath\" \"ERROR\"",
                    "        exit 1",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Failed to download from S3: $($_.Exception.Message)\" \"ERROR\"",
                    "    exit 1",
                    "}",
                    "",
                    "# Verify file is a valid MSI",
                    "try {",
                    "    $FileInfo = Get-ItemProperty $LocalPath",
                    "    if ($FileInfo.Extension -ne '.msi') {",
                    "        Write-Log \"Warning: File extension is not .msi: $($FileInfo.Extension)\" \"WARNING\"",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Could not verify file properties: $($_.Exception.Message)\" \"WARNING\"",
                    "}",
                    "",
                    "# Install MSI",
                    "Write-Log \"Starting MSI installation...\" \"INFO\"",
                    "Write-Log \"Command: msiexec.exe /i `\"$LocalPath`\" $InstallArgs\" \"INFO\"",
                    "",
                    "try {",
                    "    $StartTime = Get-Date",
                    "    ",
                    "    $ProcessArgs = @(",
                    "        '/i'",
                    "        \"`\"$LocalPath`\"\"",
                    "    )",
                    "    ",
                    "    # Split install arguments and add them",
                    "    if ($InstallArgs -and $InstallArgs.Trim() -ne '') {",
                    "        $InstallArgs.Split(' ') | ForEach-Object {",
                    "            if ($_.Trim() -ne '') {",
                    "                $ProcessArgs += $_.Trim()",
                    "            }",
                    "        }",
                    "    }",
                    "    ",
                    "    $Process = Start-Process -FilePath 'msiexec.exe' -ArgumentList $ProcessArgs -Wait -PassThru -NoNewWindow",
                    "    ",
                    "    $EndTime = Get-Date",
                    "    $Duration = $EndTime - $StartTime",
                    "    ",
                    "    Write-Log \"Installation completed in $([math]::Round($Duration.TotalMinutes, 2)) minutes\" \"INFO\"",
                    "    Write-Log \"Exit code: $($Process.ExitCode)\" \"INFO\"",
                    "    ",
                    "    # Check exit code",
                    "    switch ($Process.ExitCode) {",
                    "        0 {",
                    "            Write-Log \"Installation completed successfully\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        3010 {",
                    "            Write-Log \"Installation completed successfully (reboot required)\" \"SUCCESS\"",
                    "            $ExitStatus = 0",
                    "        }",
                    "        1602 {",
                    "            Write-Log \"Installation cancelled by user\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1603 {",
                    "            Write-Log \"Installation failed (fatal error)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1618 {",
                    "            Write-Log \"Another installation is in progress\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1619 {",
                    "            Write-Log \"Installation package could not be opened\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        1620 {",
                    "            Write-Log \"Installation package could not be opened (invalid package)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "        default {",
                    "            Write-Log \"Installation failed with unknown exit code: $($Process.ExitCode)\" \"ERROR\"",
                    "            $ExitStatus = 1",
                    "        }",
                    "    }",
                    "} catch {",
                    "    Write-Log \"Installation error: $($_.Exception.Message)\" \"ERROR\"",
                    "    $ExitStatus = 1",
                    "} finally {",
                    "    # Cleanup downloaded file",
                    "    try {",
                    "        if (Test-Path $LocalPath) {",
                    "            Remove-Item $LocalPath -Force",
                    "            Write-Log \"Cleaned up installer file: $LocalPath\" \"INFO\"",
                    "        }",
                    "    } catch {",
                    "        Write-Log \"Failed to cleanup file: $($_.Exception.Message)\" \"WARNING\"",
                    "    }",
                    "}",
                    "",
                    "Write-Log \"MSI installation process completed\" \"INFO\"",
                    "exit $ExitStatus"
                ]
            }
        }
    ]
}